<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbrace.Unity.PurePool</name>
    </assembly>
    <members>
        <member name="T:Umbrace.Unity.PurePool.BasicObjectPool`1">
            <summary>
            A basic implementation of an object pool, that allows for recycling and reuse of objects.
            </summary>
            <typeparam name="T">The type of object being pooled.</typeparam>
            <seealso cref="T:Umbrace.Unity.PurePool.IObjectPool`1"/>
        </member>
        <member name="F:Umbrace.Unity.PurePool.BasicObjectPool`1.DefaultInitialSize">
            <summary>
            The default initial size of newly-created pools.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.BasicObjectPool`1.DefaultMaximumSize">
            <summary>
            The default maximum size of newly-created pools.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.BasicObjectPool`1.pooledTypeImplementsIPoolable">
            <summary>
            A value indicating whether the pooled type <typeparamref name="T"/> implements the <see cref="T:Umbrace.Unity.PurePool.IPoolable"/> interface.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.LogMessages">
            <summary>
            Gets or sets the level of log messaging that the pool will output.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether to instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <remarks>
            <para>The maximum size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>If an object is released to the pool while the pool is full, the object will be destroyed.</para>
            <para>
            If <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.MaximumSize"/> is set to a value lower than the current <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>, the pool will be
            reduced in size by destroying excess objects.
            </para>
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count">
            <summary>
            Gets the number of objects currently contained by the pool.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsFull"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.CountChanged"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CountChangedHandler"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.MaximumSize"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsEmpty">
            <summary>
            Gets a value indicating whether the pool is empty and contains no objects.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsFull"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsFull">
            <summary>
            Gets a value indicating whether the pool is full, and cannot contain any more objects.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsEmpty"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire">
            <summary>
            <para>Gets a value indicating whether an instance can be acquired from the pool.</para>
            <para>An instance can be acquired when the pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>.</para>
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.InstantiateWhenEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquireChanged"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquireChangedHandler"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Items">
            <summary>
            Gets a list of items currently contained by the pool.
            </summary>
            <remarks>
            <para>
            This property always creates a new <see cref="T:System.Collections.Generic.List`1"/> each time the property getter is accessed.
            For performance reasons the value should be cached where possible, to avoid the costs of object instantiation and garbage collection.
            </para>
            <para>See the <see cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/> method for a way to avoid the allocation of a new <see cref="T:System.Collections.Generic.List`1"/> object.</para>
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectInstantiated">
            <summary>
            Occurs when a new object is instantiated.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectAcquired">
            <summary>
            Occurs when an object is acquired from the pool.
            </summary>
            <remarks>
            This event will be invoked for objects that are instantiated when the pool is empty, in addition to <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectInstantiated"/>.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectReleased">
            <summary>
            Occurs when an object is released back to the pool.
            </summary>
            <remarks>
            This event will be invoked for objects that are released to a pool that has reached its maximum size, and are therefore destroyed,
            in addition to <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectDestroyed"/>.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectDestroyed">
            <summary>
            Occurs when an object is destroyed.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquireChanged">
            <summary>
            Occurs when the value of <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.BasicObjectPool`1.CountChanged">
            <summary>
            Occurs when <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectInstantiatedHandler">
            <summary>
            An action that will be invoked when a new object is instantiated. The new object is passed as a parameter.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectAcquiredHandler">
            <summary>
            An action that will be invoked when an object is acquired from the pool.
            The object is passed as a parameter, as well as a value indicating whether the object was instantiated.
            </summary>
            <remarks>
            This action will be invoked for objects that are instantiated when the pool is empty, in addition to <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectInstantiatedHandler"/>.
            In this situation, the second parameter is set to <see langword="true"/> to indicate that the acquired object was instantiated.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectReleasedHandler">
            <summary>
            An action that will be invoked when an object is released back to the pool.
            The object being released is passed as a parameter, as well as a value indicating whether the object is about to be destroyed.
            </summary>
            <remarks>
            This action will be invoked for objects that are released to a pool that has reached its maximum size.
            In this situation, the second parameter is set to <see langword="true"/> to indicate that the released object is about to be destroyed.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectDestroyedHandler">
            <summary>
            An action that will be invoked when an object is destroyed. The object being destroyed is passed as a parameter.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquireChangedHandler">
            <summary>
            An action that will be invoked when the value of <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/> changes.
            The new value of <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/> is passed as a parameter.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CountChangedHandler">
            <summary>
            An action that will be invoked when <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/> changes.
            The new value of <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/> is passed as a parameter.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.BasicObjectPool`1"/> class.
            </summary>
            <remarks>
            This constructor uses the public parameterless constructor on type <typeparamref name="T"/> for the creation of new objects.
            If you need to have greater control over the creation of new objects, or <typeparamref name="T"/> does not have a public parameterless
            constructor, you should use the overloaded constructor that takes a factory method, <see cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.#ctor(System.Func{`0})"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If type <typeparamref name="T"/> has no public parameterless constructor.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.BasicObjectPool`1"/> class.
            </summary>
            <param name="initialSize">The initial number of objects to populate the pool with.</param>
            <param name="maximumSize">The maximum size of the pool, which is the maximum number of objects it can contain.</param>
            <remarks>
            This constructor uses the public parameterless constructor on type <typeparamref name="T"/> for the creation of new objects.
            If you need to have greater control over the creation of new objects, or <typeparamref name="T"/> does not have a public parameterless
            constructor, you should use the overloaded constructor that takes a factory method, <see cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If type <typeparamref name="T"/> has no public parameterless constructor.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.BasicObjectPool`1"/> class.
            </summary>
            <param name="factory">A factory method that constructs and returns a new object of type <typeparamref name="T"/> each time it is invoked.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.BasicObjectPool`1"/> class.
            </summary>
            <param name="factory">A factory method that constructs and returns a new object of type <typeparamref name="T"/> each time it is invoked.</param>
            <param name="initialSize">The initial number of objects to populate the pool with.</param>
            <param name="maximumSize">The maximum size of the pool, which is the maximum number of objects it can contain.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Initialise(System.Int32,System.Int32)">
            <summary>
            Initialises the pool, populating it with the initial number of objects.
            </summary>
            <param name="initialSize">The initial number of objects to populate the pool with.</param>
            <param name="maximumSize">The maximum size of the pool, which is the maximum number of objects it can contain.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Acquire">
            <summary>
            Acquires an object from the pool.
            </summary>
            <returns>An object from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.TryAcquire(`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.TryAcquire(`0@)">
            <summary>
            Acquires an object from the pool.
            </summary>
            <param name="instance">When this method returns, contains the object from the pool, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Acquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Release(`0)">
            <summary>
            Releases an object back to the pool.
            </summary>
            <param name="instance">The object to release to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.SetSize(System.Int32)">
            <summary>
            Sets the number of objects contained by the pool, either destroying excess pooled objects, or instantiating new ones.
            </summary>
            <param name="poolSize">The target number of objects the pool should contain.</param>
            <remarks>
            <paramref name="poolSize"/> cannot be a negative number, and cannot be larger than <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.MaximumSize"/>.
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Clear"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Fill">
            <summary>
            Fills the pool, populating it with pooled objects until it reaches the maximum pool size.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Clear"/>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.MaximumSize"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Clear">
            <summary>
            Clears the pool, emptying it of all pooled objects.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Fill"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Remove(`0)">
            <summary>
            Removes the specified instance from the pool.
            </summary>
            <param name="instance">The instance of the source object that should be removed from the pool.</param>
            <returns><see langword="true"/> if <paramref name="instance"/> was found in the pool and removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Contains(`0)">
            <summary>
            Determines whether an instance is in the pool.
            </summary>
            <param name="instance">The instance of the source object to locate in the pool.</param>
            <returns><see langword="true"/> if <paramref name="instance"/> is found in the pool; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.GetItems(System.Collections.Generic.List{`0})">
            <summary>
            Gets a list of items currently contained by the pool, and stores them in the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The existing list in which the items should be stored.</param>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Items"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.InternalAdd(`0)">
            <summary>
            Adds an instance directly to the pool. This method is used internally and should be used with caution.
            </summary>
            <param name="instance">The instance to add to the pool.</param>
            <remarks>
            <para>If the maximum size of the pool would be exceeded by adding the instance, the instance is destroyed.</para>
            <para>
            This method does not inform the instance that it is being returned to the pool, and does not raise
            any events. It should only be used to add instances to the pool that were previously already in the pool,
            such as those serialised during live recompilation.
            </para>
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.InternalTryInstantiate(`0@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </summary>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.AcquireFromPool">
            <summary>
            Acquires an object from the pool.
            </summary>
            <returns>An object from the pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Instantiate">
            <summary>
            Instantiates a new object.
            </summary>
            <returns>A newly-instantiated object.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.AddToPool(`0)">
            <summary>
            Adds the specified object to the pool.
            </summary>
            <param name="instance">The object to add to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.Pop">
            <summary>
            Removes an object from the pool, and returns it.
            </summary>
            <returns>The object that was removed from the pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.OnObjectInstantiated(`0)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectInstantiated"/> event.
            </summary>
            <param name="instance">The object that was instantiated.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.OnObjectAcquired(`0,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectAcquired"/> event.
            </summary>
            <param name="instance">The object that was acquired from the pool.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.OnObjectReleased(`0,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectReleased"/> event.
            </summary>
            <param name="instance">The object that was released back to the pool.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.OnObjectDestroyed(`0)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.ObjectDestroyed"/> event.
            </summary>
            <param name="instance">The object that was destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.OnCanAcquireChanged(System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquireChanged"/> event.
            </summary>
            <param name="canAcquire">The new value of <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.CanAcquire"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.BasicObjectPool`1.OnCountChanged(System.Int32)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.BasicObjectPool`1.CountChanged"/> event.
            </summary>
            <param name="count">The new value of <see cref="P:Umbrace.Unity.PurePool.BasicObjectPool`1.Count"/>.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ComponentPoolManagerSettings">
            <summary>
            A container class for the settings that a <see cref="T:Umbrace.Unity.PurePool.ComponentPoolManager"/> can have.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManagerSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ComponentPoolManagerSettings"/> class.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ComponentPoolSettings">
            <summary>
            A container class for the settings that a <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/> can have.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPoolSettings.DefaultSettings">
            <summary>
            Gets the default settings.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPoolSettings.Source">
            <summary>
            Gets or sets the game object that the pool will be used for.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.ComponentPoolSettings.Source"/>, if the <see cref="T:Umbrace.Unity.PurePool.ComponentPoolSettings"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPoolSettings.AdditionalComponentTypes">
            <summary>
            Gets a list of additional component types that should be added to the same GameObject as the pooled component.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ComponentPoolSettings"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolSettings.#ctor(Umbrace.Unity.PurePool.ComponentPoolSettings)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ComponentPoolSettings"/> class, using the specified settings.
            </summary>
            <param name="settings">The settings to copy the values from.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolSettings.Freeze">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableMonoBehaviour">
            <summary>
            A component that allows pooling of multiple associated <see cref="T:UnityEngine.MonoBehaviour"/> components.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableParticleSystem">
            <summary>
            A component that allows pooling of multiple associated <see cref="T:UnityEngine.ParticleSystem"/> components.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.PoolableParticleSystem.PlayOnAcquire">
            <summary>
            A value indicating whether to set the particle systems into play mode and enable emitting when the instance is acquired from the pool.
            </summary>
            <remarks>
            Setting this property to <see langword="true"/> will automatically call <see cref="M:UnityEngine.ParticleSystem.Play"/> on the particle systems
            attached to this <see cref="T:UnityEngine.GameObject"/>. This provides the same behaviour as <see cref="P:UnityEngine.ParticleSystem.MainModule.playOnAwake"/>, but
            for use with pooling.
            </remarks>
        </member>
        <member name="F:Umbrace.Unity.PurePool.PoolableParticleSystem.ClearOnRelease">
            <summary>
            A value indicating whether to remove all particles in the particle systems when the instance is released to the pool.
            </summary>
            <remarks>
            Setting this property to <see langword="true"/> will automatically call <see cref="M:UnityEngine.ParticleSystem.Clear"/> on the particle systems
            attached to this <see cref="T:UnityEngine.GameObject"/>.
            </remarks>
        </member>
        <member name="F:Umbrace.Unity.PurePool.PoolableParticleSystem.AutoReleaseWhenDone">
            <summary>
            A value indicating whether to release the <see cref="T:UnityEngine.GameObject"/> this component is attached to when the particle system is done.
            </summary>
            <remarks>
            When enabled, the <see cref="T:Umbrace.Unity.PurePool.PoolableParticleSystem"/> will wait until the particle system has completed and all particles are dead,
            before automatically releasing the <see cref="T:UnityEngine.GameObject"/> to the first <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> found in the scene.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableParticleSystem.Umbrace#Unity#PurePool#IPoolable#Acquire">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableParticleSystem.Umbrace#Unity#PurePool#IPoolable#Release">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableRigidbody">
            <summary>
            A component that allows pooling of multiple associated <see cref="T:UnityEngine.Rigidbody"/> components.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableRigidbody.Umbrace#Unity#PurePool#IPoolable#Acquire">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableRigidbody.Umbrace#Unity#PurePool#IPoolable#Release">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.IComponentPoolSettings">
            <summary>
            An interface that defines the settings that can be changed on a <see cref="T:UnityEngine.Component"/> pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IComponentPoolSettings.AdditionalComponentTypes">
            <summary>
            Gets a collection of additional component types that should exist on the pooled object.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.IPoolBase">
            <summary>
            An interface that defines the behaviour and properties of a serialisable object pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IPoolBase.IsInitialised">
            <summary>
            Gets a value indicating whether the pool has been initialised.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IPoolBase.Statistics">
            <summary>
            Gets an object containing general operational statistics about the pool.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IPoolBase.CanAcquire">
            <summary>
            <para>Gets a value indicating whether an instance can be acquired from the pool.</para>
            <para>An instance can be acquired when the pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.IObjectPool.InstantiateWhenEmpty"/> is <see langword="true"/>.</para>
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.IObjectPool.InstantiateWhenEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.PoolBase`3.CanAcquireChanged"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.IPoolBase.Initialised">
            <summary>
            Occurs when the pool is initialised.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.IPoolBase.Destroyed">
            <summary>
            Occurs when the pool is destroyed.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.IPoolBase.CanAcquireChanged">
            <summary>
            Occurs when the value of <see cref="P:Umbrace.Unity.PurePool.IPoolBase.CanAcquire"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.IPoolBase.CanAcquire"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.IPoolBase.CountChanged">
            <summary>
            Occurs when <see cref="P:Umbrace.Unity.PurePool.IObjectPool.Count"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.IObjectPool.Count"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IPoolBase.Initialise">
            <summary>
            Initialises the pool, populating it with the initial number of objects.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ISharedPoolSettings">
            <summary>
            An interface that defines the shared settings that can be changed on a <see cref="T:UnityEngine.GameObject"/> pool and a <see cref="T:UnityEngine.Component"/> pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether pooling is enabled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.LogMessages">
            <summary>
            Gets or sets the level of log messaging that the pool will output.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.NotificationMode">
            <summary>
            Gets or sets the modes in which pooled objects are notified of their acquisition from, and release to, the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.DontDestroyOnLoad">
            <summary>
            Gets or sets a value indicating whether the pool should persist between scene changes.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether to instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.ReparentPooledObjects">
            <summary>
            Gets or sets a value indicating whether to re-parent the pooled objects to the pool's transform, after the objects are released.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <remarks>
            <para>The maximum size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>If an object is released to the pool while the pool is full, the object will be destroyed.</para>
            <para>
            If <see cref="P:Umbrace.Unity.PurePool.ISharedPoolSettings.MaximumSize"/> is set to a value lower than the current size of the pool, the pool will be
            reduced in size by destroying excess objects.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.RecordStatistics">
            <summary>
            Gets or sets a value indicating whether to record pool statistics.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.InitialSize">
            <summary>
            Gets or sets the initial size of the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.InitialiseOnStart">
            <summary>
            Gets or sets a value indicating whether to initialise the pool in the <see cref="T:UnityEngine.MonoBehaviour"/> Start method.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings.WarnOnDestroy">
            <summary>
            Gets or sets a value indicating whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
            <remarks>
            <para>
            Poolable objects should be released to the pool and re-used, rather than being destroyed.
            This property ensures any destruction of the pooled objects is logged.
            </para>
            <para>
            Unfortunately, scene changes may also cause pooled objects to be destroyed. In this case, the warning message will be shown incorrectly,
            and can safely be ignored.
            </para>
            </remarks>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ISharedPoolSettings`1">
            <summary>
            An interface that defines the shared settings that can be changed on a <see cref="T:UnityEngine.GameObject"/> pool and a <see cref="T:UnityEngine.Component"/> pool.
            </summary>
            <typeparam name="TSource">The type of object being pooled.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ISharedPoolSettings`1.Source">
            <summary>
            Gets or sets the source object that will be pooled.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolBase`3">
            <summary>
            An abstract <see cref="T:UnityEngine.MonoBehaviour"/> component that provides shared functionality for the pooling of many instances of a type, allowing the instances to be recycled and reused.
            </summary>
            <typeparam name="TSource">The type of the source object to be pooled.</typeparam>
            <typeparam name="TInstance">The type of the instances of a pooled object.</typeparam>
            <typeparam name="TSettings">The type of the pool settings.</typeparam>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.PoolBase`3"/> can survive an assembly reload caused by live recompilation inside of the Unity editor.
            </para>
            <para>
            <typeparamref name="TSource"/> and <typeparamref name="TInstance"/> may differ in the case of a source that is a <see cref="T:System.Type"/>.
            For example, a <typeparamref name="TSource"/> of <see cref="T:System.Type"/> where the provided source is <c>typeof(Component)</c>,
            will result in instances of <see cref="T:UnityEngine.Component"/>, and therefore <typeparamref name="TInstance"/> should be <see cref="T:UnityEngine.Component"/>.
            </para>
            </remarks>
            <seealso cref="T:Umbrace.Unity.PurePool.ISharedPoolSettings`1"/>
            <seealso cref="T:Umbrace.Unity.PurePool.IObjectPool`1"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Pool">
            <summary>
            When implemented in a derived class, gets or sets the internal object pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Source">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Enabled">
            <summary>
            Gets or sets a value indicating whether pooling is enabled.
            </summary>
            <remarks>
            When <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Enabled"/> is set to <see langword="false"/>, the pool will appear empty,
            and attempts to acquire from the pool will fail unless <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.InitialiseOnStart">
            <summary>
            Gets or sets a value indicating whether to initialise the pool in the <see cref="T:UnityEngine.MonoBehaviour"/> Start method.
            Cannot be set once the pool has been initialised.
            </summary>
            <remarks>
            This property cannot be set once the pool has been initialised.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.IsInitialised">
            <summary>
            Gets a value indicating whether the pool has been initialised.
            </summary>
            <remarks>An initialised pool cannot have its <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InitialiseOnStart"/> property changed.</remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Definition">
            <summary>
            Gets the settings that were used to initialise this pool.
            </summary>
            <remarks>
            If the pool has not yet been initialised, this will return an immutable copy of the current settings.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.LogMessages">
            <summary>
            Gets or sets the level of log messaging that the pool will output.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.NotificationMode">
            <summary>
            Gets or sets the modes in which pooled objects are notified of their acquisition from, and release to, the pool.
            </summary>
            <remarks>
            <para>
            Depending on the modes chosen, the pool will inform the components on the pooled object in different ways.
            The modes can be combined to support components on the same object that require differing modes.
            </para>
            <para>
            If a component needs to handle the notification but its class cannot be modified, a separate component should be created and attached to the object,
            which will handle the notification on the original component's behalf.
            </para>
            <list type="table">
            <listheader>
            <term>Notification Mode</term>
            <description>Description</description>>
            </listheader>
            <item>
            <term><see cref="F:Umbrace.Unity.PurePool.NotificationMode.Interface"/></term>>
            <description>
            <para>A custom interface that is applied to any components that need to respond to the notification.</para>
            <para>Components attached to the pooled object should implement the <see cref="T:Umbrace.Unity.PurePool.IPoolable"/> interface if they wish to perform actions when the object is acquired from,
            or released to, the pool.</para>
            </description>
            </item>
            <item>
            <term><see cref="F:Umbrace.Unity.PurePool.NotificationMode.SendMessage"/></term>
            <description>
            <para>The built-in Unity messaging system that sends notifications using the <see cref="M:UnityEngine.GameObject.SendMessage(System.String)"/> method.</para>
            <para>
            Components attached to the pooled object should implement the <c>OnAcquire</c> method to receive a notification when the object is acquired from the pool,
            and the <c>OnRelease</c> method to receive a notification when the object is released back to the pool.
            </para>
            </description>
            </item>
            <item>
            <term><see cref="F:Umbrace.Unity.PurePool.NotificationMode.UnityMessagingInterface"/></term>
            <description>
            <para>The built-in Unity messaging system that sends notifications using the <see cref="T:UnityEngine.EventSystems.ExecuteEvents"/> class, using an interface applied to any components that need to respond to the notification.</para>
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Umbrace.Unity.PurePool.NotificationMode"/>
            <seealso cref="T:Umbrace.Unity.PurePool.IPoolable"/>
            <seealso cref="M:UnityEngine.GameObject.SendMessage(System.String)"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.DontDestroyOnLoad">
            <summary>
            Gets or sets a value indicating whether the pool should persist between scene changes.
            </summary>
            <remarks>
            <para>
            Upon setting the <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.DontDestroyOnLoad"/> property to <see langword="true"/>, the pool will be prevented from
            being destroyed when loading a new scene.
            </para>
            <para>
            It's important to make the distinction that it's actually the root transform of the <see cref="T:UnityEngine.GameObject"/> to which the pool is attached that
            will persist between scene changes. The root transform is the top-most transform in the hierarchy.
            </para>
            <para>
            If the <see cref="T:Umbrace.Unity.PurePool.PoolBase`3"/> component is removed from its game object, the game object will still persist through scene changes.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether to instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
            <remarks>When set to <see langword="true"/>, <see cref="M:UnityEngine.Object.Instantiate``1(``0)"/> is used to create a new object if the pool is empty.</remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.ReparentPooledObjects">
            <summary>
            Gets or sets a value indicating whether to re-parent the pooled objects to the pool's <see cref="T:UnityEngine.Transform"/>,
            after the objects are returned to the pool.
            </summary>
            <remarks>
            Re-parenting is enabled by default and is the safest option, but comes with a small performance penalty.
            Disabling re-parenting provides the best performance but there is the increased risk of any of the objects being affected
            by other scripts. As the objects will be parented beneath various other objects, deleting of an unrelated object
            may cause the pooled object to also be deleted.
            You should pay great attention to what objects you destroy if re-parenting is disabled.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.InitialSize">
            <summary>
            Gets or sets the initial size of the pool.
            Cannot be set once the pool has been initialised.
            </summary>
            <remarks>
            <para>This property cannot be set once the pool has been initialised.</para>
            <para>The initial size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>This is the desired number of objects in the pool after the <see cref="M:Umbrace.Unity.PurePool.PoolBase`3.Initialise"/> method has been called.</para>
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.MaximumSize"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <remarks>
            <para>The maximum size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>If an object is released to the pool while the pool is full, the object will be destroyed.</para>
            <para>
            If <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.MaximumSize"/> is set to a value lower than the current <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/>, the pool will be
            reduced in size by destroying excess objects.
            </para>
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InitialSize"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Count">
            <summary>
            Gets the number of objects currently contained by the pool.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.IsInitialised"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InitialSize"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.MaximumSize"/>
            <seealso cref="E:Umbrace.Unity.PurePool.PoolBase`3.CountChanged"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Statistics">
            <summary>
            Gets an object containing general operational statistics about the pool.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.IsEmpty">
            <summary>
            Gets a value indicating whether the pool is empty and contains no objects.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire">
            <summary>
            <para>Gets a value indicating whether an instance can be acquired from the pool.</para>
            <para>An instance can be acquired when the pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>.</para>
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.PoolBase`3.CanAcquireChanged"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.RecordStatistics">
            <summary>
            Gets or sets a value indicating whether to record pool statistics.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Statistics"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.WarnOnDestroy">
            <summary>
            Gets or sets a value indicating whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
            <remarks>
            <para>
            Poolable objects should be released to the pool and re-used, rather than being destroyed.
            This property ensures any destruction of the pooled objects is logged.
            </para>
            <para>
            Unfortunately, scene changes may also cause pooled objects to be destroyed. In this case, the warning message will be shown incorrectly,
            and can safely be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Items">
            <summary>
            Gets a list of items currently contained by the pool.
            </summary>
            <remarks>
            <para>This property cannot be accessed until the pool has been initialised.</para>
            <para>
            This property always creates a new <see cref="T:System.Collections.Generic.List`1"/> each time the property getter is accessed.
            For performance reasons the value should be cached where possible, to avoid the costs of object instantiation and garbage collection.
            </para>
            <para>See the <see cref="M:Umbrace.Unity.PurePool.PoolBase`3.GetItems(System.Collections.Generic.List{`1})"/> method for a way to avoid the allocation of a new <see cref="T:System.Collections.Generic.List`1"/> object.</para>
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.GetItems(System.Collections.Generic.List{`1})"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolBase`3.Settings">
            <summary>
            Gets or sets the current settings used by the pool. Cannot be set once the pool has been initialised.
            </summary>
            <remarks>
            This property cannot be set once the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Definition"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.Initialised">
            <summary>
            Occurs when the pool is initialised.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.Destroyed">
            <summary>
            Occurs when the pool is destroyed.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectInstantiated">
            <summary>
            Occurs when a new instance of the source object is instantiated.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectAcquired">
            <summary>
            Occurs when an instance of the source object is acquired from the pool.
            </summary>
            <remarks>
            This event will also be invoked for objects that are instantiated when the pool is empty, in addition to <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectInstantiated"/>.
            In this situation, the <see cref="P:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.Instantiated"/> property is set to <see langword="true"/> to indicate that the acquired object was instantiated.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectReleased">
            <summary>
            Occurs when an instance of the source object is released back to the pool.
            </summary>
            <remarks>
            This event will also be invoked for objects that are released to a pool that has reached its maximum size.
            In this situation, the <see cref="P:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.Destroying"/> property is set to <see langword="true"/> to indicate that the released object is about to be destroyed.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectDestroyed">
            <summary>
            Occurs when an instance of the source object is destroyed.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.CanAcquireChanged">
            <summary>
            Occurs when the value of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolBase`3.CountChanged">
            <summary>
            Occurs when <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.CanInitialise">
            <summary>
            When overridden in a derived class, determines whether the pool can be initialised.
            </summary>
            <returns><see langword="true"/> if the pool can be initialised; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Initialise(`2)">
            <summary>
            Initialises the pool, populating it with the initial number of objects.
            </summary>
            <param name="settings">The settings to use to initialise the pool.</param>
            <remarks>After <see cref="M:Umbrace.Unity.PurePool.PoolBase`3.Initialise(`2)"/> has been called, the <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Definition"/> property will contain the settings that were used to initialise the pool.</remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Initialise">
            <summary>
            Initialises the pool, populating it with the initial number of objects.
            </summary>
            <remarks>After <see cref="M:Umbrace.Unity.PurePool.PoolBase`3.Initialise"/> has been called, the <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Definition"/> property will contain the settings that were used to initialise the pool.</remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Acquire">
            <summary>
            Acquires an instance from the pool.
            </summary>
            <returns>An instance from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.TryAcquire(`1@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.TryAcquire(`1@)">
            <summary>
            Acquires an instance from the pool.
            </summary>
            <param name="instance">When this method returns, contains the instance from the pool, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Acquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)">
            <summary>
            Releases an instance back to the pool.
            </summary>
            <param name="instance">The instance to release to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1,System.Single)">
            <summary>
            Releases an instance back to the pool after a specified time delay.
            </summary>
            <param name="instance">The instance to release to the pool.</param>
            <param name="delay">The period of time to wait before releasing the instance to the pool.</param>
            <remarks>
            The delay is measured in scaled time, and is therefore affected by <see cref="P:UnityEngine.Time.timeScale"/>.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.SetSize(System.Int32)">
            <summary>
            Sets the number of objects contained by the pool, either destroying excess pooled objects, or instantiating new ones.
            </summary>
            <param name="poolSize">The target number of objects the pool should contain.</param>
            <remarks>
            <paramref name="poolSize"/> cannot be a negative number, and cannot be larger than <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.MaximumSize"/>.
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Clear"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Grow(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Shrink(System.Int32)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Fill">
            <summary>
            Fills the pool, populating it with pooled objects until it reaches the maximum pool size.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Clear"/>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.MaximumSize"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Grow(System.Int32)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Clear">
            <summary>
            Clears the pool, emptying it of all pooled objects.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Shrink(System.Int32)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Grow(System.Int32)">
            <summary>
            Increases the number of objects contained by the pool by the specified amount.
            </summary>
            <param name="amount">The amount of new objects to add to the pool.</param>
            <remarks><paramref name="amount"/> cannot be a negative number.</remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Shrink(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Clear"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.Shrink(System.Int32)">
            <summary>
            Decreases the number of objects contained by the pool by the specified amount.
            </summary>
            <param name="amount">The amount of objects to remove from the pool.</param>
            <remarks><paramref name="amount"/> cannot be a negative number.</remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Grow(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Clear"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.GetItems(System.Collections.Generic.List{`1})">
            <summary>
            Gets a list of items currently contained by the pool, and stores them in the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The existing list in which the items should be stored.</param>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.Items"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.InternalTryInstantiate(`1@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </summary>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnInitialised">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.Initialised"/> event.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnDestroyed">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.Destroyed"/> event.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnObjectInstantiated(`1)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectInstantiated"/> event.
            </summary>
            <param name="instance">The instance of the source object that was instantiated.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnObjectAcquired(`1,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectAcquired"/> event.
            </summary>
            <param name="instance">The instance of the source object that was acquired from the pool.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnObjectReleased(`1,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectReleased"/> event.
            </summary>
            <param name="instance">The instance of the source object that was released back to the pool.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnObjectDestroyed(`1)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectDestroyed"/> event.
            </summary>
            <param name="instance">The instance of the source object that was destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnCanAcquireChanged(System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.CanAcquireChanged"/> event.
            </summary>
            <param name="canAcquire">The new value of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.OnCountChanged(System.Int32)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.CountChanged"/> event.
            </summary>
            <param name="count">The new value of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Count"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.CreateInternalPool">
            <summary>
            When implemented in a derived class, creates the internal object pool.
            </summary>
            <returns>The internal object pool to store instances in.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.CreateSettingsClone(`2)">
            <summary>
            When implemented in a derived class, creates a new instance of <typeparamref name="TSettings"/> that is an exact copy of the specified settings.
            </summary>
            <param name="settings">The settings to copy.</param>
            <returns>A new instance of <typeparamref name="TSettings"/> that is an exact copy of <paramref name="settings"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolBase`3.DestroyInstance(`1)">
            <summary>
            When implemented in a derived class, destroys the specified instance.
            </summary>
            <param name="instance">The instance to destroy.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableAudioSource">
            <summary>
            A component that allows pooling of multiple associated <see cref="T:UnityEngine.AudioSource"/> components.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.PoolableAudioSource.PlayOnAcquire">
            <summary>
            A value indicating whether the audio sources will automatically start playing when the instance is acquired from the pool.
            </summary>
            <remarks>
            Setting this property to <see langword="true"/> will automatically call <see cref="M:UnityEngine.AudioSource.Play"/> on the audio sources
            attached to this <see cref="T:UnityEngine.GameObject"/>. This provides the same behaviour as <see cref="P:UnityEngine.AudioSource.playOnAwake"/>, but
            for use with pooling.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableAudioSource.Umbrace#Unity#PurePool#IPoolable#Acquire">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableAudioSource.Umbrace#Unity#PurePool#IPoolable#Release">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.Editor.ContainerSettings">
            <summary>
            A container class that holds display-related settings for pool containers.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ContainerSettings.FoldoutOpen">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the foldout for the container should be expanded in the inspector.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Editor.ContainerSettings.ChangeValues">
            <summary>
            Updates the <see cref="T:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1"/> objects to their new value.
            This should be called at the start of the <see cref="F:UnityEngine.EventType.Layout"/> pass.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.DefaultSettingsExpanded">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the default settings should be shown in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.PoolViewExpanded">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the object pools should be shown in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.LoosePoolContainerExpanded">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the Loose Pools container should be shown in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.SortAlphabetically">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the containers and pools should be sorted alphabetically.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.ShowContainers">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the containers should be shown in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.LoosePoolsContainerName">
            <summary>
            Gets or sets the name of the loose pools container - the container that displays pools that are not children of the manager.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.GetDisplaySettings(UnityEngine.GameObject)">
            <summary>
            Gets the display settings for the specified container.
            </summary>
            <param name="container">The container whose display settings should be returned.</param>
            <returns>The display settings for the specified container.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.GetDisplaySettings(`0)">
            <summary>
            Gets the display settings for the specified pool.
            </summary>
            <param name="pool">The pool whose display settings should be returned.</param>
            <returns>The display settings for the specified pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Editor.ManagerEditorSettings`4.ChangeValues">
            <summary>
            Changes <see cref="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.CurrentValue"/> to <see cref="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.TargetValue"/> for all <see cref="T:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1"/>.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings">
            <summary>
            A container class that holds display-related settings for object pools.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.ShowDetails">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the detailed/advanced pool settings should be displayed in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.ShowStatistics">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the pool's runtime statistics should be displayed in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.ShowDefinition">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the pool's definition (its settings at the time it was initialised) should be displayed in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.StatisticsExpanded">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the pool's runtime statistics should be expanded in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.DefinitionExpanded">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the pool's definition (its settings at the time it was initialised) should be expanded in the inspector.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.EventsExpanded">
            <summary>
            Gets a <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> indicating whether the pool's UnityEvents foldout should be expanded in the inspector.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Editor.PoolDisplaySettings.ChangeValues">
            <summary>
            Updates the <see cref="T:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1"/> objects to their new value.
            This should be called at the start of the <see cref="F:UnityEngine.EventType.Layout"/> pass.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolSettingsComponent.PoolSettings">
            <summary>
            Gets the display-related settings for the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.Editor.PoolSettingsComponent.TimeDisplayMode">
            <summary>
            Gets or sets the way in which times are displayed.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.Editor.TimeDisplayMode">
            <summary>
            Specifies the way in which times are displayed.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.Editor.TimeDisplayMode.FrameCount">
            <summary>
            The frame count is displayed.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.Editor.TimeDisplayMode.RealtimeSinceStartup">
            <summary>
            The real-time since startup is displayed. This is not affected by pausing or time-scaling.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.Editor.TimeDisplayMode.Time">
            <summary>
            The scaled game time since startup is displayed. This is affected by pausing and time-scaling.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.Editor.TimeDisplayMode.UnscaledTime">
            <summary>
            The unscaled game time since startup is displayed. This is affected by pausing, but not by time-scaling.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableComponent">
            <summary>
            A component that will automatically be attached to an instance of a pooled object,
            to provide notifications when the object is acquired from, or released to, the pool.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableGameObject">
            <summary>
            A component that will automatically be attached to an instance of a pooled object,
            to provide notifications when the object is acquired from, or released to, the pool.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ComponentPool">
            <summary>
            A <see cref="T:UnityEngine.MonoBehaviour"/> component that provides pooling of many instances of a particular <see cref="T:UnityEngine.Component"/>, allowing the components to be recycled and reused.
            </summary>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/> can survive an assembly reload caused by live recompilation inside of the Unity editor.
            </para>
            <para>
            To use the <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/>, add a new instance of the component to a <see cref="T:UnityEngine.GameObject"/>, and then set the properties to appropriate values.
            Once all properties have been set, invoke the <see cref="M:Umbrace.Unity.PurePool.ComponentPool.Initialise"/> method. A pool cannot be used without being initialised.
            </para>
            <note type="caution">
            <para>
            Unlike prefabs, components are difficult to pool correctly. As the components may have been used for any other purpose previously,
            there is no simple way of knowing which properties should be reset, and no easy way of resetting all properties.
            </para>
            <para>
            It's therefore very important when you pool a component that you take great care to ensure all properties that you plan on changing are
            reset. If necessary, you should implement a component deriving from <see cref="T:UnityEngine.MonoBehaviour"/> which implements the <see cref="T:Umbrace.Unity.PurePool.IPoolable"/>
            interface, and use this component to reset built-in Unity components.
            </para>
            </note>
            </remarks>
            <example>
            <code language="cs">
            // Create the pool as a component on a game object.
            var pool = gameObject.AddComponent&lt;ComponentPool&gt;();
            
            // Set up the pool's properties.
            pool.Source = typeof(AudioSource);
            pool.InitialSize = 50;
            pool.MaximumSize = 200;
            pool.InstantiateWhenEmpty = true;
            pool.NotificationMode = NotificationMode.Interface;
            pool.LogMessages = LogLevel.Warning;
            
            // Initialise the pool. It will contain 50 objects.
            pool.Initialise();
            
            // Acquire one of the 50 objects from the pool. The Acquire method can be used safely if InstantiateWhenEmpty is true, or if a check is made to CanAcquire beforehand.
            AudioSource instance = pool.Acquire&lt;AudioSource&gt;();
            
            // Acquire one of the 49 remaining objects from the pool. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            AudioSource secondInstance;
            if (pool.TryAcquire(out secondInstance)) {
            	// Release the object back to the pool. It now contains 49 objects again.
            	pool.Release(secondInstance);
            }
            
            // Release the object back to the pool. It now contains 50 objects.
            pool.Release(instance);
            </code>
            </example>
            <seealso cref="T:Umbrace.Unity.PurePool.ComponentPoolManager"/>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableComponentPool"/>
            <seealso cref="T:Umbrace.Unity.PurePool.IComponentPoolSettings"/>
            <seealso cref="T:Umbrace.Unity.PurePool.IObjectPool`1"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPool.Pool">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPool.NotificationMode">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPool.ReparentPooledObjects">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPool.WarnOnDestroy">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPool.AdditionalComponentTypes">
            <inheritdoc />
        </member>
        <member name="F:Umbrace.Unity.PurePool.ComponentPool.ObjectInstantiatedEvent">
            <summary>
            Occurs when a new instance of the component is instantiated.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.ComponentPool.ObjectAcquiredEvent">
            <summary>
            Occurs when an instance of the component is acquired from the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.ComponentPool.ObjectReleasedEvent">
            <summary>
            Occurs when an instance of the component is released back to the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.ComponentPool.ObjectDestroyedEvent">
            <summary>
            Occurs when an instance of the component is destroyed.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.CanInitialise">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Initialise">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire">
            <summary>
            Acquires an instance of the component.
            </summary>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.TryAcquire(`1@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Transform,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the components's transform to.</param>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1">
            <summary>
            Acquires an instance of the component.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Transform,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the components's transform to.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire(UnityEngine.Component@)">
            <summary>
            Acquires an instance of the component.
            </summary>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Acquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire(UnityEngine.Transform,UnityEngine.Component@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">he transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(``0@)">
            <summary>
            Acquires an instance of the component.
            </summary>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Transform,``0@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of the component.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPool.Acquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate(UnityEngine.Transform,UnityEngine.Component@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform, position and rotation.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate``1(``0@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </summary>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate``1(UnityEngine.Transform,``0@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.InternalTryInstantiate``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform, position and rotation.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.OnObjectInstantiated(UnityEngine.Component)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectInstantiated"/> event.
            </summary>
            <param name="instance">The instance of the source object that was instantiated.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.OnObjectAcquired(UnityEngine.Component,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectAcquired"/> event.
            </summary>
            <param name="instance">The instance of the source object that was acquired from the pool.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.OnObjectReleased(UnityEngine.Component,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectReleased"/> event.
            </summary>
            <param name="instance">The instance of the source object that was released back to the pool.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.OnObjectDestroyed(UnityEngine.Component)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectDestroyed"/> event.
            </summary>
            <param name="instance">The instance of the source object that was destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.CreateSettingsClone(Umbrace.Unity.PurePool.ComponentPoolSettings)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.CreateInternalPool">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.DestroyInstance(UnityEngine.Component)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPool.CreateCustomGameObject(UnityEditor.MenuCommand)">
            <summary>
            Adds a menu item to create custom GameObjects.
            </summary>
            <param name="menuCommand"></param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ComponentEvent">
            <summary>
            Represents an event that has a single <see cref="T:UnityEngine.Component"/> parameter.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ComponentPoolManager">
            <summary>
            Manages a collection of <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/> components, simplifying access to the pools and allowing for automatic pool creation.
            </summary>
            <example>
            <code language="cs">
            // Create the manager as a component on a game object.
            var manager = gameObject.AddComponent&lt;ComponentPoolManager&gt;();
            
            // Set up the manager's properties.
            manager.DontDestroyOnLoad = true;
            manager.AttachDescendentPools = true;
            manager.AcquireMode = AcquireNoPoolMode.CreatePool;
            
            // Attach an existing pool to the manager.
            manager.AttachPool(pool);
            
            // Create a pool that is attached to the manager.
            manager.CreatePool(new ComponentPoolSettings {
            	Source = typeof(AudioSource),
            	DontDestroyOnLoad = true,
            	Enabled = true,
            	InitialiseOnStart = true,
            	InitialSize = 10,
            	InstantiateWhenEmpty = true,
            	LogMessages = LogLevel.Warning,
            	MaximumSize = 50,
            	NotificationMode = NotificationMode.Interface,
            	RecordStatistics = true,
            	ReparentPooledObjects = true
            });
            
            // Acquire an AudioSource instance from the manager. The Acquire method can be used safely if the AudioSource pool's InstantiateWhenEmpty property is true, or if a check is made to CanAcquire beforehand.
            AudioSource instance = manager.Acquire&lt;AudioSource&gt;();
            
            // Acquire another AudioSource instance from the manager. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            AudioSource secondInstance;
            if (manager.TryAcquire(out secondInstance)) {
            	// Release the component back to the manager.
            	manager.Release(secondInstance);
            }
            
            // Release the component back to the manager.
            manager.Release(instance);
            </code>
            </example>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPoolManager.ObjectPools">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPoolManager.Settings">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire(System.Type,UnityEngine.Transform)">
            <summary>
            Acquires an instance of <paramref name="componentType"/> from an attached pool, and sets its parent transform.
            </summary>
            <param name="componentType">The type of component to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of <paramref name="componentType"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire(System.Type,UnityEngine.Transform,UnityEngine.Component@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire(System.Type,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of <paramref name="componentType"/> from an attached pool, and sets its position and rotation.
            </summary>
            <param name="componentType">The type of component to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <returns>An instance of <paramref name="componentType"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire(System.Type,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire(System.Type,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of <paramref name="componentType"/> from an attached pool, and sets its parent transform, position and rotation.
            </summary>
            <param name="componentType">The type of component to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <returns>An instance of <paramref name="componentType"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire(System.Type,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool.
            </summary>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns>An instance of the component <typeparamref name="T"/> that was acquired from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns>An instance of the component <typeparamref name="T"/> that was acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(UnityEngine.Transform,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns>An instance of the component <typeparamref name="T"/> that was acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns>An instance of the component <typeparamref name="T"/> that was acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire(System.Type,UnityEngine.Transform,UnityEngine.Component@)">
            <summary>
            Acquires an instance of <paramref name="componentType"/> from an attached pool, and sets its parent transform.
            </summary>
            <param name="componentType">The type of component to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="componentType"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="componentType"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire(System.Type,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire(System.Type,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)">
            <summary>
            Acquires an instance of <paramref name="componentType"/> from an attached pool, and sets its position and rotation.
            </summary>
            <param name="componentType">The type of component to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="componentType"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="componentType"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire(System.Type,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire(System.Type,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Component@)">
            <summary>
            Acquires an instance of <paramref name="componentType"/> from an attached pool, and sets its parent transform, position and rotation.
            </summary>
            <param name="componentType">The type of component to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="componentType"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="componentType"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire(System.Type,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(``0@)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool.
            </summary>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(UnityEngine.Transform,``0@)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Acquires an instance of the component <typeparamref name="T"/> from an attached pool,, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <typeparam name="T">The type of component to acquire an instance of.</typeparam>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.ComponentPoolManager.Acquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.ReleaseInternal(UnityEngine.Component)">
            <summary>
            Releases an instance of a component that was previously acquired from an attached pool.
            </summary>
            <param name="instance">The instance to release back to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.CreatePool(System.Type)">
            <summary>
            Creates a <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/> that pools instances of <paramref name="componentType"/>, and attaches it to the manager.
            The pool is created on a child object of the manager's game object.
            </summary>
            <param name="componentType">The type of component to be pooled.</param>
            <returns>The newly-created <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.CreatePool(System.Type,UnityEngine.GameObject,System.Boolean)">
            <summary>
            Creates a <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/> that pools instances of <paramref name="componentType"/>, and attaches it to the manager.
            </summary>
            <param name="componentType">The type of component to be pooled.</param>
            <param name="parent">The <see cref="T:UnityEngine.GameObject"/> that the pool should be attached to, either directly or indirectly depending on <paramref name="createContainer"/>.</param>
            <param name="createContainer"><see langword="true"/> to create the pool on a child object parented to <paramref name="parent"/>; <see langword="false"/> to create the pool directly on <paramref name="parent"/>.</param>
            <returns>The newly-created <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.InternalAcquire(System.Type,Umbrace.Unity.PurePool.ComponentPool@,UnityEngine.Component@)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.GetSourceName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentPoolManager.CreateCustomGameObject(UnityEditor.MenuCommand)">
            <summary>
            Adds a menu item to create custom GameObjects.
            </summary>
            <param name="menuCommand"></param>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentPoolManager.Instance">
            <summary>
            Gets the <see cref="T:Umbrace.Unity.PurePool.ComponentPoolManager"/> found in the scene.
            </summary>
            <remarks>
            <para>
            If more than one <see cref="T:Umbrace.Unity.PurePool.ComponentPoolManager"/> exists in the scene, the instance returned by this property is undefined.
            </para>
            <para>
            If no <see cref="T:Umbrace.Unity.PurePool.ComponentPoolManager"/> is found in the scene, a new root <see cref="T:UnityEngine.GameObject"/> is
            created with the <see cref="T:Umbrace.Unity.PurePool.ComponentPoolManager"/> component attached.
            </para>
            </remarks>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolManagerBase`5">
            <summary>
            An abstract class that provides shared functionality to manage a collection of <see cref="T:Umbrace.Unity.PurePool.PoolBase`3"/> components, simplifying access to the pools and allowing for automatic pool creation.
            </summary>
            <typeparam name="TManagerSettings">The type of the manager's settings.</typeparam>
            <typeparam name="TPool">The type of the pools maintained by the manager.</typeparam>
            <typeparam name="TPoolSettings">The type of the settings used by the pools.</typeparam>
            <typeparam name="TSource">The type used to identify the desired source when acquiring an instance.</typeparam>
            <typeparam name="TInstance">The type of the instances returned from the pools.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.ObjectPools">
            <summary>
            When overridden in a derived class, gets the internal object pool dictionary, mapping from the source object to its pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.Settings">
            <summary>
            When overridden in a derived class, gets or sets the current settings used by the manager.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.Enabled">
            <summary>
            Gets or sets a value indicating whether pooling is enabled.
            </summary>
            <remarks>
            When <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.Enabled"/> is set to <see langword="false"/>, all pools accessed through the <see cref="T:Umbrace.Unity.PurePool.PoolManagerBase`5"/> will appear empty,
            and acquiring from them will only work if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.DontDestroyOnLoad">
            <summary>
            Gets or sets a value indicating whether the pool manager (and the pools beneath it) will remain in the scene when a new scene is loaded.
            </summary>
            <remarks>
            <para>
            Upon setting the <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.DontDestroyOnLoad"/> property to <see langword="true"/>, the manager will be prevented from
            being destroyed when loading a new scene. In addition, all pools that are parented beneath the manager in the hierarchy will
            also be prevented from being destroyed.
            </para>
            <para>
            It's important to make the distinction that it's actually the root transform of the <see cref="T:UnityEngine.GameObject"/> to which the manager is attached that
            will persist between scene changes. The root transform is the top-most transform in the hierarchy.
            Therefore, every object that is parented beneath the root transform in the hierarchy will persist between scene changes, and not only the manager.
            </para>
            <para>
            If the <see cref="T:Umbrace.Unity.PurePool.PoolManagerBase`5"/> component is removed from its game object, the game object will still persist through scene changes.
            </para>
            <para>
            Pools that are attached to the manager using <see cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.AttachPool(`1)"/>, but that are not parented beneath the manager in the hierarchy,
            are not affected by this property.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AttachDescendentPools">
            <summary>
            Gets or sets value indicating whether to attach all descendent pools to the manager on startup.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode">
            <summary>
            Gets or sets the way in which to handle attempts to acquire an object, for which no pool exists.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolCount">
            <summary>
            Gets the number of pools attached to the manager.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.Pools">
            <summary>
            Gets the collection of pools attached to the manager.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolManagerBase`5.DefaultPoolSettings">
            <summary>
            Gets the settings that are used when a new pool is created.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolAttached">
            <summary>
            Occurs when a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> is attached to the manager.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolDetached">
            <summary>
            Occurs when a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> is detached from the manager.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolCreated">
            <summary>
            Occurs when a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> is created by the manager.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolDestroyed">
            <summary>
            Occurs when a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> is destroyed by the manager.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Acquire(`3)">
            <summary>
            Acquires an instance of <paramref name="source"/> from an attached pool.
            </summary>
            <param name="source">The source to acquire an instance of.</param>
            <returns>An instance of <paramref name="source"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.TryAcquire(`3,`4@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.TryAcquire(`3,`4@)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)">
            <summary>
            Releases an instance that was previously acquired from an attached pool.
            </summary>
            <param name="instance">The instance to release back to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4,System.Single)">
            <summary>
            Releases an instance that was previously acquired from an attached pool, after a specified time delay.
            </summary>
            <param name="instance">The instance to release to the pool.</param>
            <param name="delay">The period of time to wait before releasing the instance to the pool.</param>
            <remarks>
            The delay is measured in scaled time, and is therefore affected by <see cref="P:UnityEngine.Time.timeScale"/>.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.ReleaseInternal(`4)">
            <summary>
            When overridden in a derived class, releases an instance that was previously acquired from an attached pool.
            </summary>
            <param name="instance">The instance to release back to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.HasPool(`3)">
            <summary>
            Determines whether the manager has a pool that handles instances of the specified source object.
            </summary>
            <param name="sourceObject">The source object to check.</param>
            <returns><see langword="true"/> if the manager has a pool that handles instances of <paramref name="sourceObject"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.GetPool(`3)">
            <summary>
            Gets the pool that handles instances of the specified source object.
            The manager must contain a matching pool to use this method.
            </summary>
            <param name="sourceObject">The source object to retrieve the pool for.</param>
            <returns>A <typeparamref name="TPool"/> that handles instances of <paramref name="sourceObject"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.TryGetPool(`3,`1@)">
            <summary>
            Gets the pool that handles instances of the specified source object.
            </summary>
            <param name="sourceObject">The source object to retrieve the pool for.</param>
            <param name="pool">When this method returns, contains the pool that handles the specified source object, if one is found; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if the manager contains a pool that handles the specified source object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CreatePool(`2)">
            <summary>
            Creates a new pool using the specified settings, and attaches it to the manager.
            The pool is created on a child object of the manager's game object.
            </summary>
            <param name="settings">The settings to create the pool with.</param>
            <returns>The newly-created pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CreatePool(`2,UnityEngine.GameObject,System.Boolean,System.String)">
            <summary>
            Creates a new pool using the specified settings, and attaches it to the manager.
            </summary>
            <param name="settings">The settings to create the pool with.</param>
            <param name="parent">The <see cref="T:UnityEngine.GameObject"/> that the pool should be attached to, either directly or indirectly depending on <paramref name="createContainer"/>.</param>
            <param name="createContainer"><see langword="true"/> to create the pool on a child object parented to <paramref name="parent"/>; <see langword="false"/> to create the pool directly on <paramref name="parent"/>.</param>
            <param name="containerName">The name of the child object to be used as a container for the pool. If this is not specified, the name of the source will be used.</param>
            <returns>The newly-created pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.DestroyPool(`1,System.Boolean)">
            <summary>
            Destroys the specified pool that's attached to the manager.
            </summary>
            <param name="pool">The pool to destroy. It must be attached to the manager.</param>
            <param name="destroyContainer">Whether the <see cref="T:UnityEngine.GameObject"/> the pool was attached to should also be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.GetPooledCount(`3)">
            <summary>
            Gets the number of instances of the specified object contained in the pool.
            </summary>
            <param name="sourceObject">The game object to check.</param>
            <returns>The number of instances of the specified object contained in the pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.IsPoolEmpty(`3)">
            <summary>
            Determines whether the pool is empty for instances of the specified object.
            </summary>
            <param name="sourceObject">The game object to check.</param>
            <returns><see langword="true"/> if the pool is empty for instances of the specified object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)">
            <summary>
            Determines whether an instance of <paramref name="sourceObject"/> can be acquired from its pool.
            </summary>
            <param name="sourceObject">The game object to check.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> can be acquired from its pool; otherwise, <see langword="false"/>.</returns>
            <remarks>An instance can be acquired when its pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.AttachPool(`1)">
            <summary>
            Attaches the specified pool to the manager, allowing the manager to acquire and release instances from it.
            </summary>
            <param name="pool">The pool to attach.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.DetachPool(`1)">
            <summary>
            Detaches the specified pool from the manager, without destroying it.
            </summary>
            <param name="pool">The pool to detach.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.IsAttached(`1)">
            <summary>
            Determines whether the specified pool is attached to the manager.
            </summary>
            <param name="pool">The pool to check.</param>
            <returns><see langword="true"/> if the pool is attached to the manager; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.FindChildPools(System.Boolean)">
            <summary>
            Finds all pools that are parented to the manager's game object.
            </summary>
            <param name="includeInactive"><see langword="true"/> to include pools attached to inactive game objects; otherwise, <see langword="false"/>.</param>
            <returns>The pools that were found, as an array of <typeparamref name="TPool"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.GetSourceName(`3)">
            <summary>
            When implemented in a derived class, gets the name of the specified source.
            </summary>
            <param name="source">The source to get the name of.</param>
            <returns>The name of the specified source.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.AttachChildren">
            <summary>
            Attaches all pools that are descendents of the manager, and adds an event to wait for any that aren't yet initialised.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.InternalGetPoolOrAcquire(`3,`1@,`4@)">
            <summary>
            Gets the pool for the specified source object, if one exists; otherwise, takes a further action depending upon the value of <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/>.
            </summary>
            <param name="sourceObject">The source game object of the pool to retrieve.</param>
            <param name="pool">When this method returns, contains the pool for the specified source object, if one exists; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if no pool exists for the specified source object, and <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/> is set to <see cref="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Instantiate"/>; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if a pool exists for the specified source object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <list type="bullet">
            <item><description>
            If <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/> is set to <see cref="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Error"/> and no pool exists for the specified source object, an <see cref="T:System.ArgumentException"/> is thrown.
            </description></item>
            <item><description>
            If <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/> is set to <see cref="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Instantiate"/> and no pool exists for the specified source object, a new instance of <paramref name="sourceObject"/>
            is instantiated. <paramref name="instance"/> is set to the new instance, and the method returns <see langword="false"/>.
            </description></item>
            <item><description>
            If <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/> is set to <see cref="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.CreatePool"/> and no pool exists for the specified source object, a new pool is created and attached
            to the manager. <paramref name="pool"/> is set to the new pool, and the method returns <see langword="true"/>.
            </description></item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentException">If no pool exists for the specified source object, and <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/> is set to <see cref="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Error"/>.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.InternalAcquire(`3,`1@,`4@)">
            <summary>
            When implemented in a derived class, attempts to acquire an instance of a source according to <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/>.
            </summary>
            <param name="sourceObject">The source to acquire an instance of.</param>
            <param name="pool">When this method returns, contains the pool for the specified source, if one was created; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <param name="instance">When this method returns, contains the instance of the specified source, if one was created; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if a pool exists for the specified source; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">If no pool exists for the specified source, and <see cref="P:Umbrace.Unity.PurePool.PoolManagerBase`5.AcquireMode"/> is set to <see cref="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Error"/>.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.HandlePoolDestroyed(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.Destroyed"/> event on an attached pool.
            </summary>
            <param name="sender">The sender of the event, which should be a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/>.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.OnPoolAttached(`1)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolAttached"/> event.
            </summary>
            <param name="pool">The pool that was attached to the manager.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.OnPoolDetached(`1)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolDetached"/> event.
            </summary>
            <param name="pool">The pool that was detached from the manager.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.OnPoolCreated(`1)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolCreated"/> event.
            </summary>
            <param name="pool">The pool that was created by the manager.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.OnPoolDestroyed(`1)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolDestroyed"/> event.
            </summary>
            <param name="pool">The pool that was destroyed by the manager.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerBase`5.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.GameObjectPoolManager">
            <summary>
            Manages a collection of <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> components, simplifying access to the pools and allowing for automatic pool creation.
            </summary>
            <example>
            <code language="cs">
            // Create the manager as a component on a game object.
            var manager = gameObject.AddComponent&lt;GameObjectPoolManager&gt;();
            
            // Set up the manager's properties.
            manager.DontDestroyOnLoad = true;
            manager.AttachDescendentPools = true;
            manager.AcquireMode = AcquireNoPoolMode.CreatePool;
            
            // Attach an existing pool to the manager.
            manager.AttachPool(pool);
            
            // Create a pool that is attached to the manager.
            manager.CreatePool(new GameObjectPoolSettings {
            	Source = myPrefab,
            	DontDestroyOnLoad = true,
            	Enabled = true,
            	InitialiseOnStart = true,
            	InitialSize = 10,
            	InstantiateWhenEmpty = true,
            	LogMessages = LogLevel.Warning,
            	MaximumSize = 50,
            	NotificationMode = NotificationMode.Interface,
            	RecordStatistics = true,
            	ReparentPooledObjects = true
            });
            
            // Acquire an instance of myPrefab from the manager. The Acquire method can be used safely if the myPrefab pool's InstantiateWhenEmpty property is true, or if a check is made to CanAcquire beforehand.
            GameObject instance = manager.Acquire(myPrefab);
            
            // Acquire another myPrefab instance from the manager. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            GameObject secondInstance;
            if (manager.TryAcquire(myPrefab, out secondInstance)) {
            	// Release the instance back to the manager.
            	manager.Release(secondInstance);
            }
            
            // Release the instance back to the manager.
            manager.Release(instance);
            </code>
            </example>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPoolManager.ObjectPools">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPoolManager.Settings">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Transform,System.Boolean)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its position and rotation.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its parent transform, position and rotation.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.CanAcquire(`3)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Transform,System.Boolean,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its position and rotation.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.TryAcquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of <paramref name="sourceObject"/> from an attached pool, and sets its parent transform, position and rotation.
            </summary>
            <param name="sourceObject">The game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPoolManager.Acquire(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolManagerBase`5.Release(`4)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.ReleaseInternal(UnityEngine.GameObject)">
            <summary>
            Releases an instance of a game object that was previously acquired from an attached pool.
            </summary>
            <param name="instance">The instance to release back to its pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.CreatePool(UnityEngine.GameObject)">
            <summary>
            Creates a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> that pools instances of <paramref name="sourceObject"/>, and attaches it to the manager.
            The pool is created on a child object of the manager's game object.
            </summary>
            <param name="sourceObject">The <see cref="T:UnityEngine.GameObject"/> to be pooled.</param>
            <returns>The newly-created <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.CreatePool(UnityEngine.GameObject,UnityEngine.GameObject,System.Boolean)">
            <summary>
            Creates a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> that pools instances of <paramref name="sourceObject"/>, and attaches it to the manager.
            </summary>
            <param name="sourceObject">The <see cref="T:UnityEngine.GameObject"/> to be pooled.</param>
            <param name="parent">The <see cref="T:UnityEngine.GameObject"/> that the pool should be attached to, either directly or indirectly depending on <paramref name="createContainer"/>.</param>
            <param name="createContainer"><see langword="true"/> to create the pool on a child object parented to <paramref name="parent"/>; <see langword="false"/> to create the pool directly on <paramref name="parent"/>.</param>
            <returns>The newly-created <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.InternalAcquire(UnityEngine.GameObject,Umbrace.Unity.PurePool.GameObjectPool@,UnityEngine.GameObject@)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.GetSourceName(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManager.CreateCustomGameObject(UnityEditor.MenuCommand)">
            <summary>
            Adds a menu item to create custom GameObjects.
            </summary>
            <param name="menuCommand"></param>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPoolManager.Instance">
            <summary>
            Gets the <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> found in the scene.
            </summary>
            <remarks>
            <para>
            If more than one <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> exists in the scene, the instance returned by this property is undefined.
            </para>
            <para>
            If no <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> is found in the scene, a new root <see cref="T:UnityEngine.GameObject"/> is
            created with the <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> component attached.
            </para>
            </remarks>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolManagerSettings`2">
            <summary>
            A container class for the settings that a <see cref="T:Umbrace.Unity.PurePool.PoolManagerBase`5"/> can have.
            </summary>
            <typeparam name="TPoolSettings">The type of settings used by individual pools.</typeparam>
            <typeparam name="TSource">The type of object being pooled.</typeparam>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolManagerSettings`2.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolManagerSettings`2"/> class.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SharedPoolSettings`1">
            <summary>
            A container class for the shared settings that a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> and a <see cref="T:Umbrace.Unity.PurePool.ComponentPool"/> can have.
            </summary>
            <typeparam name="TSource">The type of object being pooled.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.Frozen">
            <summary>
            Gets a value indicating whether the object has been frozen, and cannot be modified.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.Source">
            <summary>
            Gets or sets the source object that will be pooled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.InitialSize">
            <summary>
            Gets or sets the initial size of the pool.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.InitialSize"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> have been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.InitialiseOnStart">
            <summary>
            Gets or sets a value indicating whether to initialise the pool in the <see cref="T:UnityEngine.MonoBehaviour"/> Start method.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.InitialiseOnStart"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> have been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.Enabled">
            <summary>
            Gets or sets a value indicating whether pooling is enabled.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.Enabled"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.LogMessages">
            <summary>
            Gets or sets the level of log messaging that the pool will output.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.LogMessages"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.NotificationMode">
            <summary>
            Gets or sets the modes in which pooled objects are notified of their acquisition from, and release to, the pool.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.NotificationMode"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.DontDestroyOnLoad">
            <summary>
            Gets or sets a value indicating whether the pool should persist between scene changes.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.DontDestroyOnLoad"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether to instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.InstantiateWhenEmpty"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.ReparentPooledObjects">
            <summary>
            Gets or sets a value indicating whether to re-parent the pooled objects to the pool's transform, after the objects are released.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.ReparentPooledObjects"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.MaximumSize"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.RecordStatistics">
            <summary>
            Gets or sets a value indicating whether to record pool statistics.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.RecordStatistics"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.WarnOnDestroy">
            <summary>
            Gets or sets a value indicating whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
            <remarks>
            <para>
            Poolable objects should be released to the pool and re-used, rather than being destroyed.
            This property ensures any destruction of the pooled objects is logged.
            </para>
            <para>
            Unfortunately, scene changes may also cause pooled objects to be destroyed. In this case, the warning message will be shown incorrectly,
            and can safely be ignored.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.SharedPoolSettings`1.WarnOnDestroy"/>, if the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SharedPoolSettings`1.#ctor(Umbrace.Unity.PurePool.SharedPoolSettings{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> class, using the specified settings.
            </summary>
            <param name="settings">The settings to copy the values from.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SharedPoolSettings`1.Freeze">
            <summary>
            Freezes the object and prevents modifications being made to it.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SharedPoolSettings`1.EnsureNotFrozen">
            <summary>
            Ensures the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has not been frozen, and throws an exception if it has.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the <see cref="T:Umbrace.Unity.PurePool.SharedPoolSettings`1"/> has been frozen.</exception>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ComponentTypeCollection">
            <summary>
            Represents a serialisable collection of component types that can be individually accessed by index.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentTypeCollection.Frozen">
            <summary>
            Gets a value indicating whether the object has been frozen, and cannot be modified.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ComponentTypeCollection"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.#ctor(Umbrace.Unity.PurePool.ComponentTypeCollection)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ComponentTypeCollection"/> class.
            </summary>
            <param name="other">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.Freeze">
            <summary>
            Freezes the object and prevents modifications being made to it.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.EnsureNotFrozen">
            <summary>
            Ensures the <see cref="T:Umbrace.Unity.PurePool.ComponentTypeCollection"/> has not been frozen, and throws an exception if it has.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the <see cref="T:Umbrace.Unity.PurePool.ComponentTypeCollection"/> has been frozen.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.IsAllowed(System.Type)">
            <summary>
            Checks whether the specified type is allowed in the collection.
            </summary>
            <param name="type">The type to check.</param>
            <returns><see langword="true"/> if the specified type is allowed in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentTypeCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.ComponentTypeCollection.Count">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.Add(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.Contains(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.CopyTo(System.Type[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.IndexOf(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.Insert(System.Int32,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.Remove(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.ComponentTypeCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.DebugHelper">
            <summary>
            A static class that provides logging methods that write to the Unity console.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.DebugHelper.IsLoggingEnabled">
            <summary>
            Gets or sets a value indicating whether logging to the Unity console is enabled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.DebugHelper.IsInformationLoggingEnabled">
            <summary>
            Gets or sets a value indicating whether logging of <see cref="F:Umbrace.Unity.PurePool.LogLevel.Information"/> messages to the Unity console is enabled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.DebugHelper.IsWarningLoggingEnabled">
            <summary>
            Gets or sets a value indicating whether logging of <see cref="F:Umbrace.Unity.PurePool.LogLevel.Warning"/> messages to the Unity console is enabled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.DebugHelper.IsErrorLoggingEnabled">
            <summary>
            Gets or sets a value indicating whether logging of <see cref="F:Umbrace.Unity.PurePool.LogLevel.Error"/> messages to the Unity console is enabled.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.Log(System.String)">
            <summary>
            Logs the specified informational message to the Unity console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.Log(System.String,UnityEngine.Object)">
            <summary>
            Logs the specified informational message to the Unity console.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarning(System.String)">
            <summary>
            Logs the specified warning message to the Unity console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarning(System.String,UnityEngine.Object)">
            <summary>
            Logs the specified warning message to the Unity console.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogError(System.String)">
            <summary>
            Logs the specified error message to the Unity console.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogError(System.String,UnityEngine.Object)">
            <summary>
            Logs the specified error message to the Unity console.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.Log(Umbrace.Unity.PurePool.LogLevel,System.String)">
            <summary>
            Logs the specified informational message to the Unity console, if allowed by <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The maximum level of log messaging that is allowed.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.Log(Umbrace.Unity.PurePool.LogLevel,System.String,UnityEngine.Object)">
            <summary>
            Logs the specified informational message to the Unity console, if allowed by <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The maximum level of log messaging that is allowed.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarning(Umbrace.Unity.PurePool.LogLevel,System.String)">
            <summary>
            Logs the specified warning message to the Unity console, if allowed by <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The maximum level of log messaging that is allowed.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarning(Umbrace.Unity.PurePool.LogLevel,System.String,UnityEngine.Object)">
            <summary>
            Logs the specified warning message to the Unity console, if allowed by <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The maximum level of log messaging that is allowed.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogError(Umbrace.Unity.PurePool.LogLevel,System.String)">
            <summary>
            Logs the specified error message to the Unity console, if allowed by <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The maximum level of log messaging that is allowed.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogError(Umbrace.Unity.PurePool.LogLevel,System.String,UnityEngine.Object)">
            <summary>
            Logs the specified error message to the Unity console, if allowed by <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The maximum level of log messaging that is allowed.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogIf(System.Boolean,System.String)">
            <summary>
            Logs the specified informational message to the Unity console, if the condition is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogIf(System.Boolean,System.String,UnityEngine.Object)">
            <summary>
            Logs the specified informational message to the Unity console, if the condition is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarningIf(System.Boolean,System.String)">
            <summary>
            Logs the specified warning message to the Unity console, if the condition is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarningIf(System.Boolean,System.String,UnityEngine.Object)">
            <summary>
            Logs the specified warning message to the Unity console, if the condition is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogErrorIf(System.Boolean,System.String)">
            <summary>
            Logs the specified error message to the Unity console, if the condition is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogErrorIf(System.Boolean,System.String,UnityEngine.Object)">
            <summary>
            Logs the specified error message to the Unity console, if the condition is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogIf(System.Func{System.Boolean},System.String)">
            <summary>
            Logs the specified informational message to the Unity console, if the condition evaluates to <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogIf(System.Func{System.Boolean},System.String,UnityEngine.Object)">
            <summary>
            Logs the specified informational message to the Unity console, if the condition evaluates to <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarningIf(System.Func{System.Boolean},System.String)">
            <summary>
            Logs the specified warning message to the Unity console, if the condition evaluates to <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogWarningIf(System.Func{System.Boolean},System.String,UnityEngine.Object)">
            <summary>
            Logs the specified warning message to the Unity console, if the condition evaluates to <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogErrorIf(System.Func{System.Boolean},System.String)">
            <summary>
            Logs the specified error message to the Unity console, if the condition evaluates to <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DebugHelper.LogErrorIf(System.Func{System.Boolean},System.String,UnityEngine.Object)">
            <summary>
            Logs the specified error message to the Unity console, if the condition evaluates to <see langword="true"/>.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message to log.</param>
            <param name="context">The object to which the message applies.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.AcquireNoPoolMode">
            <summary>
            Specifies the way in which <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> responds to attempts to acquire an object for which no pool exists.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Error">
            <summary>
            An exception is thrown and logged in Unity. No object is returned.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.Instantiate">
            <summary>
            A new object is instantiated using <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)"/>. When released, the object is destroyed.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.AcquireNoPoolMode.CreatePool">
            <summary>
            A new pool is created using default settings, to contain instances of the object. An instance is returned from the pool.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.DestroyedEventArgs">
            <summary>
            Contains event data about the destruction of an object or component.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.DestroyedEventArgs.ApplicationQuit">
            <summary>
            Gets or sets a value indicating whether the object or component was destroyed due to the application quitting.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.DestroyedEventArgs.ExpectDestroy">
            <summary>
            Gets or sets a value indicating whether the destruction of the object or component was expected.
            </summary>
            <remarks>
            Destruction is most often expected when the object is being destroyed by the pool, because pooling has been disabled.
            The object is not released to the pool and not processed as if it is being released, but is simply destroyed instead.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DestroyedEventArgs.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.DestroyedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.DestroyedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.DestroyedEventArgs"/> class.
            </summary>
            <param name="applicationQuit">A value indicating whether the object or component was destroyed due to the application quitting.</param>
            <param name="expectDestroy">A value indicating whether the destruction of the object or component was expected.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.EventArgsPool">
            <summary>
            A static class that provides pooling of <see cref="T:System.EventArgs"/> for use in events.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.EventArgsPool.GetPool``1">
            <summary>
            Gets the object pool for objects of type <typeparamref name="T"/>, or creates one if it doesn't exist.
            </summary>
            <typeparam name="T">The type of object to be pooled.</typeparam>
            <returns>An object pool for objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.EventArgsPool.Acquire``1">
            <summary>
            Acquires an object of type <typeparamref name="T"/> from the pool.
            </summary>
            <typeparam name="T">The type of object to acquire.</typeparam>
            <returns>An object of type <typeparamref name="T"/> from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.EventArgsPool.Release``1(``0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.EventArgsPool.Release``1(``0)">
            <summary>
            Releases an object of type <typeparamref name="T"/> back to the pool.
            </summary>
            <param name="instance">The object to release to the pool.</param>
            <typeparam name="T">The type of the object being released.</typeparam>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolCountChangedEventArgs">
            <summary>
            Contains data for object pooling events.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolCountChangedEventArgs.Count">
            <summary>
            Gets or sets the number of objects currently contained by the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolCountChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolCountChangedEventArgs"/> class.
            </summary>
            <param name="count">The number of objects currently contained by the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolCountChangedEventArgs.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolCountChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1">
            <summary>
            Contains data for object pooling events.
            </summary>
            <typeparam name="T">The type of the object that the event is about.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.Instantiated">
            <summary>
            Gets or sets a value indicating whether the acquired object was instantiated specifically for this acquisition,
            rather than being taken from the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1"/> class.
            </summary>
            <param name="instance">The object that the event is about.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.ReleaseInternal">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs">
            <summary>
            Contains data for object pooling events.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs.CanAcquire">
            <summary>
            Gets or sets a value indicating whether an instance can be acquired from the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs"/> class.
            </summary>
            <param name="canAcquire">A value indicating whether an instance can be acquired from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1">
            <summary>
            Contains data for object pooling events.
            </summary>
            <typeparam name="T">The type of the object that the event is about.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.Destroying">
            <summary>
            Gets or sets a value indicating whether the released object is about to be destroyed.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1"/> class.
            </summary>
            <param name="instance">The object that the event is about.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.ReleaseInternal">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.ContractException">
            <summary>
            Represents a contract violation in a method or property.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ContractException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ContractException"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ContractException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ContractException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.EditorHelper.CreateCustomGameObject``1(System.String,UnityEngine.GameObject)">
            <summary>
            Creates a new <see cref="T:UnityEngine.GameObject"/> with a component added to it, with the specified name, and parented and aligned to the specified parent.
            </summary>
            <typeparam name="T">The type of component to add to the new <see cref="T:UnityEngine.GameObject"/>.</typeparam>
            <param name="name">The name of the <see cref="T:UnityEngine.GameObject"/>.</param>
            <param name="parent">The parent <see cref="T:UnityEngine.GameObject"/>.</param>
            <remarks>
            This method is useful when using a <see cref="T:UnityEditor.MenuItem"/> attribute to add an item to the GameObject menu.
            Internally, <see cref="M:UnityEditor.GameObjectUtility.SetParentAndAlign(UnityEngine.GameObject,UnityEngine.GameObject)"/> is used to ensure the object is re-parented
            if the menu action was from a context click.
            </remarks>
        </member>
        <member name="T:Umbrace.Unity.PurePool.Extensions">
            <summary>
            Contains static extension methods for various types.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled``1(System.EventHandler{Umbrace.Unity.PurePool.PoolObjectEventArgs{``0}},System.Object,``0)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="instance">The object that the event is about.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled``1(System.EventHandler{Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs{``0}},System.Object,``0,System.Boolean)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="instance">The object that the event is about.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled``1(System.EventHandler{Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs{``0}},System.Object,``0,System.Boolean)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="instance">The object that the event is about.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled``1(System.EventHandler{Umbrace.Unity.PurePool.PoolEventArgs{``0}},System.Object,``0)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <typeparam name="TPool">The type of the pool.</typeparam>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="pool">The pool that the event is about.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled(System.EventHandler{Umbrace.Unity.PurePool.PoolCanAcquireChangedEventArgs},System.Object,System.Boolean)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="canAcquire">A value indicating whether an instance can be acquired from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled(System.EventHandler{Umbrace.Unity.PurePool.PoolCountChangedEventArgs},System.Object,System.Int32)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="count">The number of objects currently contained by the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.InvokeEventPooled(System.EventHandler{Umbrace.Unity.PurePool.DestroyedEventArgs},System.Object,System.Boolean,System.Boolean)">
            <summary>
            Invokes the specified event using a pooled object for the event data.
            </summary>
            <param name="theEvent">The event to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="applicationQuit">A value indicating whether the object or component was destroyed due to the application quitting.</param>
            <param name="expectDestroy">A value indicating whether the destruction of the object or component was expected.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.Set(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Sets the parent transform, position, and rotation of the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> whose parent transform, position, and rotation should be set.</param>
            <param name="parent">The parent transform to set.</param>
            <param name="position">The position to set.</param>
            <param name="rotation">The rotation to set.</param>
            <returns>The <paramref name="gameObject"/> whose parent transform, position, and rotation was set.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.Set(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Sets the position and rotation of the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> whose position and rotation should be set.</param>
            <param name="position">The position to set.</param>
            <param name="rotation">The rotation to set.</param>
            <returns>The <paramref name="gameObject"/> whose position and rotation was set.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.Extensions.Set(UnityEngine.GameObject,UnityEngine.Transform,System.Boolean)">
            <summary>
            Sets the parent transform of the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> whose parent transform should be set.</param>
            <param name="parent">The parent transform to set.</param>
            <param name="worldPositionStays"><see langword="true"/> if the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before; otherwise, <see langword="false"/>.</param>
            <returns>The <paramref name="gameObject"/> whose parent transform was set.</returns>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1">
            <summary>
            Encapsulates changes to a value for use within custom inspector editors. The value is only changed when <see cref="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.ChangeValue"/> is called.
            </summary>
            <typeparam name="T">The type of value to store.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.CurrentValue">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.TargetValue">
            <summary>
            Sets the target value, which will become the current value at the start of the next <see cref="F:UnityEngine.EventType.Layout"/> pass.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.#ctor(`0)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1"/> class.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.ChangeValue">
            <summary>
            Changes <see cref="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.CurrentValue"/> to <see cref="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.TargetValue"/>.
            </summary>
            <remarks>
            This method should be called at the beginning of the <see cref="F:UnityEngine.EventType.Layout"/> pass.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.ForceSet(`0)">
            <summary>
            Forcibly sets the current value immediately, without waiting for <see cref="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.ChangeValue"/> to be called.
            </summary>
            <param name="newValue">The new value to use.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue">
            <summary>
            Encapsulates changes to a boolean value for use within custom inspector editors. The value is only changed when <see cref="M:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.ChangeValue"/> is called.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> class.
            </summary>
            <param name="value">The current value.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue.Toggle">
            <summary>
            Toggles the value, setting <see cref="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.TargetValue"/> to the negated <see cref="P:Umbrace.Unity.PurePool.ForEditor.EditorChangeValue`1.CurrentValue"/>.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue.op_Implicit(Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue)~System.Boolean">
            <summary>
            Implicit conversion from <see cref="T:Umbrace.Unity.PurePool.ForEditor.BoolEditorChangeValue"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Umbrace.Unity.PurePool.GameObjectEvent">
            <summary>
            Represents an event that has a single <see cref="T:UnityEngine.GameObject"/> parameter.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.GameObjectPool">
            <summary>
            A <see cref="T:UnityEngine.MonoBehaviour"/> component that provides pooling of many instances of a single <see cref="T:UnityEngine.GameObject"/>, allowing the game objects to be recycled and reused.
            </summary>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> can survive an assembly reload caused by live recompilation inside of the Unity editor.
            </para>
            <para>
            To use the <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/>, add a new instance of the component to a <see cref="T:UnityEngine.GameObject"/>, and then set the properties to appropriate values.
            Once all properties have been set, invoke the <see cref="M:Umbrace.Unity.PurePool.GameObjectPool.Initialise"/> method. A pool cannot be used without being initialised.
            </para>
            </remarks>
            <example>
            <code language="cs">
            // Create the pool as a component on a game object.
            var pool = gameObject.AddComponent&lt;GameObjectPool&gt;();
            
            // Set up the pool's properties.
            pool.SourceObject = prefab;
            pool.InitialSize = 50;
            pool.MaximumSize = 200;
            pool.InstantiateWhenEmpty = true;
            pool.NotificationMode = NotificationMode.Interface;
            pool.LogMessages = LogLevel.Warning;
            
            // Initialise the pool. It will contain 50 objects.
            pool.Initialise();
            
            // Acquire one of the 50 objects from the pool. The Acquire method can be used safely if InstantiateWhenEmpty is true, or if a check is made to CanAcquire beforehand.
            GameObject instance = pool.Acquire();
            
            // Acquire one of the 49 remaining objects from the pool. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            GameObject secondInstance;
            if (pool.TryAcquire(out secondInstance)) {
            	// Release the object back to the pool. It now contains 49 objects again.
            	pool.Release(secondInstance);
            }
            
            // Release the object back to the pool. It now contains 50 objects.
            pool.Release(instance);
            </code>
            </example>
            <seealso cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableGameObjectPool"/>
            <seealso cref="T:Umbrace.Unity.PurePool.IGameObjectPoolSettings"/>
            <seealso cref="T:Umbrace.Unity.PurePool.IObjectPool`1"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPool.Pool">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPool.NotificationMode">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPool.ReparentPooledObjects">
            <inheritdoc />
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPool.WarnOnDestroy">
            <inheritdoc />
        </member>
        <member name="F:Umbrace.Unity.PurePool.GameObjectPool.ObjectInstantiatedEvent">
            <summary>
            Occurs when a new instance of the source object is instantiated.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.GameObjectPool.ObjectAcquiredEvent">
            <summary>
            Occurs when an instance of the source object is acquired from the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.GameObjectPool.ObjectReleasedEvent">
            <summary>
            Occurs when an instance of the source object is released back to the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.GameObjectPool.ObjectDestroyedEvent">
            <summary>
            Occurs when an instance of the source object is destroyed.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.CanInitialise">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.Initialise">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Transform,System.Boolean)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the source object, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform, position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Transform,System.Boolean,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform, position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.Source"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.PoolBase`3.Release(`1)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.InternalTryInstantiate(UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.InternalTryInstantiate(UnityEngine.Transform,System.Boolean,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.InternalTryInstantiate(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.InternalTryInstantiate(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new instance of the source object if <see cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform, position and rotation.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.PoolBase`3.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.OnObjectInstantiated(UnityEngine.GameObject)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectInstantiated"/> event.
            </summary>
            <param name="instance">The instance of the source object that was instantiated.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.OnObjectAcquired(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectAcquired"/> event.
            </summary>
            <param name="instance">The instance of the source object that was acquired from the pool.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.OnObjectReleased(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectReleased"/> event.
            </summary>
            <param name="instance">The instance of the source object that was released back to the pool.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.OnObjectDestroyed(UnityEngine.GameObject)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolBase`3.ObjectDestroyed"/> event.
            </summary>
            <param name="instance">The instance of the source object that was destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.CreateInternalPool">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.CreateSettingsClone(Umbrace.Unity.PurePool.GameObjectPoolSettings)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.DestroyInstance(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPool.CreateCustomGameObject(UnityEditor.MenuCommand)">
            <summary>
            Adds a menu item to create custom GameObjects.
            </summary>
            <param name="menuCommand"></param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager">
            <summary>
            Provides named access to the pools of a <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/>.
            </summary>
            <remarks>
            Unlike <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/>, which uses object references to refer to the source object you
            wish to acquire an instance of, <see cref="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager"/> instead uses a <see cref="T:System.String"/>
            name to refer to the source object.
            </remarks>
            <example>
            <code language="cs">
            // Create the component on a game object.
            var byName = gameObject.AddComponent&lt;NamedGameObjectPoolManager&gt;();
            
            // Set up the properties.
            byName.Manager = manager;
            byName.AutoAddFromManager = true;
            
            // Assign custom names to the objects being pooled.
            byName.SetName(prefab, "Asteroid_1");
            
            // Acquire an instance of the "prefab" object, using its string name.
            var instance = byName.Acquire("Asteroid_1");
            
            // Access the GameObjectPool that stores the "prefab" instances.
            GameObjectPool asteroidPool = byName["Asteroid_1"];
            
            // Release the acquired instance back to the pool.
            byName.Release(instance);
            </code>
            </example>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.nameDictionary">
            <summary>
            A dictionary that maps from a source object name to its corresponding source GameObject.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.manager">
            <summary>
            The pool manager whose pools should be accessed by name.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.autoAddFromManager">
            <summary>
            A value indicating whether to automatically provide named access to the pools attached to the manager.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.useResources">
            <summary>
            A value indicating whether to attempt to locate unrecognised names using <see cref="M:UnityEngine.Resources.Load(System.String)"/>.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.eventHandlerAttached">
            <summary>
            A value indicating whether the <see cref="E:Umbrace.Unity.PurePool.PoolManagerBase`5.PoolAttached"/> event is being handled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Manager">
            <summary>
            Gets or sets the pool manager whose pools should be accessed by name.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.AutoAddFromManager">
            <summary>
            Gets or sets a value indicating whether to automatically provide named access to the pools attached to the manager.
            </summary>
            <remarks>
            When enabled, the <see cref="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager"/> will listen for new pools being attached to its connected
            <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/>, and call <see cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.SetName(UnityEngine.GameObject,System.String)"/> to assign a name for the new pool.
            The name is automatically generated from the name of the <see cref="T:UnityEngine.GameObject"/> being pooled, which is the pool's source object.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.UseResources">
            <summary>
            Gets or sets a value indicating whether to attempt to locate unrecognised names using <see cref="M:UnityEngine.Resources.Load(System.String)"/>.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.AssignedNames">
            <summary>
            Gets a list of the names currently assigned to game objects.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Changed">
            <summary>
            Occurs when the collection of named pools is changed.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String)">
            <summary>
            Acquires an instance of the source object with the specified name, from an attached pool.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.CanAcquire(System.String)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Transform)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.CanAcquire(System.String)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Transform,System.Boolean)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.CanAcquire(System.String)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its position and rotation.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.CanAcquire(System.String)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its parent transform, position and rotation.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of <paramref name="sourceObject"/> acquired from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.CanAcquire(System.String)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object with the specified name, from an attached pool.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Transform,System.Boolean,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its parent transform.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its position and rotation.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryAcquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object with the specified name from an attached pool, and sets its parent transform, position and rotation.
            </summary>
            <param name="sourceObject">The name of the game object to acquire an instance of.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <paramref name="sourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> was acquired from an attached pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Acquire(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Release(UnityEngine.GameObject)">
            <summary>
            Releases an instance of a game object that was previously acquired from a pool.
            </summary>
            <param name="instance">The instance to release back to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.HasPool(System.String)">
            <summary>
            Determines whether the manager has a pool that handles instances of the source object with the specified name.
            </summary>
            <param name="sourceObject">The name of the game object to check.</param>
            <returns><see langword="true"/> if the manager has a pool that handles instances of <paramref name="sourceObject"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.GetPool(System.String)">
            <summary>
            Gets the pool that handles instances of the source object with the specified name.
            The manager must contain a matching pool to use this method.
            </summary>
            <param name="sourceObject">The name of the game object to retrieve the pool for.</param>
            <returns>A <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> that handles instances of <paramref name="sourceObject"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryGetPool(System.String,Umbrace.Unity.PurePool.GameObjectPool@)">
            <summary>
            Gets the pool that handles instances of the source object with the specified name.
            </summary>
            <param name="sourceObject">The name of the game object to retrieve the pool for.</param>
            <param name="pool">When this method returns, contains the pool that handles the specified game object, if one is found; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if the manager contains a pool that handles the specified game object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.GetPooledCount(System.String)">
            <summary>
            Gets the number of instances of the object with the specified name contained in the pool.
            </summary>
            <param name="sourceObject">The name of the game object to check.</param>
            <returns>The number of instances of the specified object contained in the pool.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.IsPoolEmpty(System.String)">
            <summary>
            Determines whether the pool is empty for instances of the object with the specified name.
            </summary>
            <param name="sourceObject">The name of the game object to check.</param>
            <returns><see langword="true"/> if the pool is empty for instances of the specified object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.CanAcquire(System.String)">
            <summary>
            Determines whether an instance of the source object with the specified name can be acquired from its pool.
            </summary>
            <param name="sourceObject">The name of the game object to check.</param>
            <returns><see langword="true"/> if an instance of <paramref name="sourceObject"/> can be acquired from its pool; otherwise, <see langword="false"/>.</returns>
            <remarks>An instance can be acquired when its pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.IObjectPool.InstantiateWhenEmpty"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.HasName(System.String)">
            <summary>
            Determines whether the specified name is currently assigned.
            </summary>
            <param name="name">The name to check.</param>
            <returns><see langword="true"/> if the specified name is currently assigned; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.HasName(UnityEngine.GameObject)">
            <summary>
            Determines whether the specified <see cref="T:UnityEngine.GameObject"/> is currently assigned a name.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to check.</param>
            <returns><see langword="true"/> if the specified <see cref="T:UnityEngine.GameObject"/> is currently assigned a name; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.GetGameObject(System.String)">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> that is currently assigned the specified name.
            </summary>
            <param name="name">The name that is currently assigned to a <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>The <see cref="T:UnityEngine.GameObject"/> that is currently assigned the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If there is no <see cref="T:UnityEngine.GameObject"/> currently assigned the specified name.</exception>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryGetGameObject(System.String,UnityEngine.GameObject@)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryGetGameObject(System.String,UnityEngine.GameObject@)">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> that is currently assigned the specified name.
            </summary>
            <param name="name">The name that is currently assigned to a <see cref="T:UnityEngine.GameObject"/>.</param>
            <param name="gameObject">
            When this method returns, contains the <see cref="T:UnityEngine.GameObject"/> that is currently assigned the specified name,
            if one exists; otherwise, <see langword="null"/>. This parameter is passed uninitialised.
            </param>
            <returns><see langword="true"/> if a <see cref="T:UnityEngine.GameObject"/> with the specified name was found; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.GetGameObject(System.String)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.GetName(UnityEngine.GameObject)">
            <summary>
            Gets the name that is currently assigned to the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> that is currently assigned a name.</param>
            <returns>The name that is currently assigned to the specified <see cref="T:UnityEngine.GameObject"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.TryGetName(UnityEngine.GameObject,System.String@)">
            <summary>
            Gets the name that is currently assigned to the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> that is currently assigned a name.</param>
            <param name="name">
            When this method returns, contains the name that is currently assigned to the specified <see cref="T:UnityEngine.GameObject"/>,
            if one exists; otherwise, <see langword="null"/>. This parameter is passed uninitialised.
            </param>
            <returns><see langword="true"/> if a name assigned to the specified <see cref="T:UnityEngine.GameObject"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.SetName(UnityEngine.GameObject,System.String)">
            <summary>
            Assigns a name to the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> whose name should be assigned.</param>
            <param name="name">The name to assign to the <see cref="T:UnityEngine.GameObject"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.RemoveName(UnityEngine.GameObject)">
            <summary>
            Removes the named access to the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> whose named access should be removed.</param>
            <returns><see langword="true"/> if the named access was removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.RemoveName(System.String)">
            <summary>
            Removes the specified named access.
            </summary>
            <param name="name">The named access to be removed.</param>
            <returns><see langword="true"/> if the named access was removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Item(System.String)">
            <summary>
            Gets the pool that handles instances of the source object with the specified name.
            The manager must contain a matching pool to use this method.
            </summary>
            <param name="name">The name of the game object to retrieve the pool for.</param>
            <returns>A <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> that handles instances of <paramref name="name"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.EnsureManager">
            <summary>
            Ensures the <see cref="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Manager"/> property has been set.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the <see cref="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Manager"/> property has not been set.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.OnChanged">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Changed"/> event.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.NamedGameObjectPoolManager.Instance">
            <summary>
            Gets the <see cref="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager"/> found in the scene.
            </summary>
            <remarks>
            <para>
            If more than one <see cref="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager"/> exists in the scene, the instance returned by this property is undefined.
            </para>
            <para>
            If no <see cref="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager"/> is found in the scene, a new root <see cref="T:UnityEngine.GameObject"/> is
            created with the <see cref="T:Umbrace.Unity.PurePool.NamedGameObjectPoolManager"/> component attached.
            </para>
            </remarks>
        </member>
        <member name="T:Umbrace.Unity.PurePool.GameObjectPoolManagerSettings">
            <summary>
            A container class for the settings that a <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManager"/> can have.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolManagerSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolManagerSettings"/> class.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.GameObjectPoolSettings">
            <summary>
            A container class for the settings that a <see cref="T:Umbrace.Unity.PurePool.GameObjectPool"/> can have.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPoolSettings.DefaultSettings">
            <summary>
            Gets the default settings.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GameObjectPoolSettings.Source">
            <summary>
            Gets or sets the game object that the pool will be used for.
            </summary>
            <exception cref="T:System.InvalidOperationException">When setting the value of <see cref="P:Umbrace.Unity.PurePool.GameObjectPoolSettings.Source"/>, if the <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolSettings"/> has been frozen.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolSettings"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GameObjectPoolSettings.#ctor(Umbrace.Unity.PurePool.GameObjectPoolSettings)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GameObjectPoolSettings"/> class, using the specified settings.
            </summary>
            <param name="settings">The settings to copy the values from.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.GenericObjectPool`1">
            <summary>
            A generic implementation of an object pool, that allows for recycling and reuse of objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of object being pooled.</typeparam>
            <seealso cref="T:Umbrace.Unity.PurePool.IObjectPool`1"/>
        </member>
        <member name="F:Umbrace.Unity.PurePool.GenericObjectPool`1.DefaultInitialSize">
            <summary>
            The default initial size of newly-created pools.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.GenericObjectPool`1.DefaultMaximumSize">
            <summary>
            The default maximum size of newly-created pools.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.LogMessages">
            <summary>
            Gets or sets the level of log messaging that the pool will output.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether to instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <remarks>
            <para>The maximum size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>If an object is released to the pool while the pool is full, the object will be destroyed.</para>
            <para>
            If <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.MaximumSize"/> is set to a value lower than the current <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/>, the pool will be
            reduced in size by destroying excess objects.
            </para>
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count">
            <summary>
            Gets the number of objects currently contained by the pool.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsFull"/>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.CountChanged"/>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.MaximumSize"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Items">
            <summary>
            Gets a list of items currently contained by the pool.
            </summary>
            <remarks>
            <para>
            This property always creates a new <see cref="T:System.Collections.Generic.List`1"/> each time the property getter is accessed.
            For performance reasons the value should be cached where possible, to avoid the costs of object instantiation and garbage collection.
            </para>
            <para>See the <see cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/> method for a way to avoid the allocation of a new <see cref="T:System.Collections.Generic.List`1"/> object.</para>
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Statistics">
            <summary>
            Gets an object containing general operational statistics about the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsEmpty">
            <summary>
            Gets a value indicating whether the pool is empty and contains no objects.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsFull"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsFull">
            <summary>
            Gets a value indicating whether the pool is full, and cannot contain any more objects.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsEmpty"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquire">
            <summary>
            <para>Gets a value indicating whether an instance can be acquired from the pool.</para>
            <para>An instance can be acquired when the pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>.</para>
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.InstantiateWhenEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquireChanged"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.GenericObjectPool`1.RecordStatistics">
            <summary>
            Gets or sets a value indicating whether to record pool statistics.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Statistics"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectInstantiated">
            <summary>
            Occurs when a new object is instantiated.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectAcquired">
            <summary>
            Occurs when an object is acquired from the pool.
            </summary>
            <remarks>
            This event will also be invoked for objects that are instantiated when the pool is empty, in addition to <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectInstantiated"/>.
            In this situation, the <see cref="P:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.Instantiated"/> property is set to <see langword="true"/> to indicate that the acquired object was instantiated.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectReleased">
            <summary>
            Occurs when an object is released back to the pool.
            </summary>
            <remarks>
            This event will also be invoked for objects that are released to a pool that has reached its maximum size.
            In this situation, the <see cref="P:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.Destroying"/> property is set to <see langword="true"/> to indicate that the released object is about to be destroyed.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectDestroyed">
            <summary>
            Occurs when an object is destroyed.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquireChanged">
            <summary>
            Occurs when the value of <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquire"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquire"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.GenericObjectPool`1.CountChanged">
            <summary>
            Occurs when <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GenericObjectPool`1"/> class.
            </summary>
            <remarks>
            This constructor uses the public parameterless constructor on type <typeparamref name="T"/> for the creation of new objects.
            If you need to have greater control over the creation of new objects, or <typeparamref name="T"/> does not have a public parameterless
            constructor, you should use the overloaded constructor that takes a factory method, <see cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.#ctor(System.Func{`0})"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If type <typeparamref name="T"/> has no public parameterless constructor.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GenericObjectPool`1"/> class.
            </summary>
            <param name="initialSize">The initial number of objects to populate the pool with.</param>
            <param name="maximumSize">The maximum size of the pool, which is the maximum number of objects it can contain.</param>
            <remarks>
            This constructor uses the public parameterless constructor on type <typeparamref name="T"/> for the creation of new objects.
            If you need to have greater control over the creation of new objects, or <typeparamref name="T"/> does not have a public parameterless
            constructor, you should use the overloaded constructor that takes a factory method, <see cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If type <typeparamref name="T"/> has no public parameterless constructor.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GenericObjectPool`1"/> class.
            </summary>
            <param name="factory">A factory method that constructs and returns a new object each time it is invoked.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.GenericObjectPool`1"/> class.
            </summary>
            <param name="factory">A factory method that constructs and returns a new object each time it is invoked.</param>
            <param name="initialSize">The initial number of objects to populate the pool with.</param>
            <param name="maximumSize">The maximum size of the pool, which is the maximum number of objects it can contain.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Acquire">
            <summary>
            Acquires an object from the pool.
            </summary>
            <returns>An object from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.TryAcquire(`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.TryAcquire(`0@)">
            <summary>
            Acquires an object from the pool.
            </summary>
            <param name="instance">When this method returns, contains the object from the pool, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Acquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Release(`0)">
            <summary>
            Releases an object back to the pool.
            </summary>
            <param name="instance">The object to release to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.SetSize(System.Int32)">
            <summary>
            Sets the number of objects contained by the pool, either destroying excess pooled objects, or instantiating new ones.
            </summary>
            <param name="poolSize">The target number of objects the pool should contain.</param>
            <remarks>
            <paramref name="poolSize"/> cannot be a negative number, and cannot be larger than <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.MaximumSize"/>.
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Clear"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Fill">
            <summary>
            Fills the pool, populating it with pooled objects until it reaches the maximum pool size.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Clear"/>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.MaximumSize"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Clear">
            <summary>
            Clears the pool, emptying it of all pooled objects.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Fill"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Remove(`0)">
            <summary>
            Removes the specified instance from the pool.
            </summary>
            <param name="instance">The instance of the source object that should be removed from the pool.</param>
            <returns><see langword="true"/> if the instance was found in the pool and removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.Contains(`0)">
            <summary>
            Determines whether an instance is in the pool.
            </summary>
            <param name="instance">The instance of the source object to locate in the pool.</param>
            <returns><see langword="true"/> if <paramref name="instance"/> is found in the pool; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.GetItems(System.Collections.Generic.List{`0})">
            <summary>
            Gets a list of items currently contained by the pool, and stores them in the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The existing list in which the items should be stored.</param>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Items"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.InternalAdd(`0)">
            <summary>
            Adds an instance directly to the pool. This method is used internally and should be used with caution.
            </summary>
            <param name="instance">The instance to add to the pool.</param>
            <remarks>
            <para>If the maximum size of the pool would be exceeded by adding the instance, the instance is destroyed.</para>
            <para>
            This method does not inform the instance that it is being returned to the pool, and does not raise
            any events. It should only be used to add instances to the pool that were previously already in the pool,
            such as those serialised during live recompilation.
            </para>
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.InternalTryInstantiate(`0@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </summary>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.OnObjectInstantiated(`0)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectInstantiated"/> event.
            </summary>
            <param name="instance">The object that was instantiated.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.OnObjectAcquired(`0,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectAcquired"/> event.
            </summary>
            <param name="instance">The object that was acquired from the pool.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.OnObjectReleased(`0,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectReleased"/> event.
            </summary>
            <param name="instance">The object that was released back to the pool.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.OnObjectDestroyed(`0)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.ObjectDestroyed"/> event.
            </summary>
            <param name="instance">The object that was destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.OnCanAcquireChanged(System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquireChanged"/> event.
            </summary>
            <param name="canAcquire">The new value of <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.CanAcquire"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.GenericObjectPool`1.OnCountChanged(System.Int32)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.GenericObjectPool`1.CountChanged"/> event.
            </summary>
            <param name="count">The new value of <see cref="P:Umbrace.Unity.PurePool.GenericObjectPool`1.Count"/>.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.IObjectPool">
            <summary>
            Defines an interface for the pooling and recycling of objects.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IObjectPool.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether the pool should instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IObjectPool.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <remarks>
            <para>The maximum size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>If an object is released to the pool while the pool is full, the object will be destroyed.</para>
            <para>
            If <see cref="P:Umbrace.Unity.PurePool.IObjectPool.MaximumSize"/> is set to a value lower than the current <see cref="P:Umbrace.Unity.PurePool.IObjectPool.Count"/>, the pool will be
            reduced in size by destroying excess objects.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IObjectPool.Count">
            <summary>
            Gets the number of objects currently contained by the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool.SetSize(System.Int32)">
            <summary>
            Sets the number of objects contained by the pool, either destroying excess pooled objects, or instantiating new ones.
            </summary>
            <param name="poolSize">The target number of objects the pool should contain.</param>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool.Clear"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool.Fill">
            <summary>
            Fills the pool, populating it with pooled objects until it reaches the maximum pool size.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool.Clear"/>
            <seealso cref="P:Umbrace.Unity.PurePool.IObjectPool.MaximumSize"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool.Clear">
            <summary>
            Clears the pool, emptying it of all pooled objects.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool.Fill"/>
        </member>
        <member name="T:Umbrace.Unity.PurePool.IObjectPool`1">
            <summary>
            Defines an interface for the pooling and recycling of objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of object being pooled.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.IObjectPool`1.Items">
            <summary>
            Gets a list of items currently contained by the pool.
            </summary>
            <remarks>
            <para>
            This property always creates a new <see cref="T:System.Collections.Generic.List`1"/> each time the property getter is accessed.
            For performance reasons the value should be cached where possible, to avoid the costs of object instantiation and garbage collection.
            </para>
            <para>See the <see cref="M:Umbrace.Unity.PurePool.IObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/> method for a way to avoid the allocation of a new <see cref="T:System.Collections.Generic.List`1"/> object.</para>
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool`1.Acquire">
            <summary>
            Acquires an object from the pool.
            </summary>
            <returns>An object from the pool.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool`1.TryAcquire(`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool`1.TryAcquire(`0@)">
            <summary>
            Acquires an object from the pool.
            </summary>
            <param name="instance">When this method returns, contains the object from the pool, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool`1.Acquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.IObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool`1.Release(`0)">
            <summary>
            Releases an object back to the pool.
            </summary>
            <param name="instance">The object to release to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IObjectPool`1.GetItems(System.Collections.Generic.List{`0})">
            <summary>
            Gets a list of items currently contained by the pool, and stores them in the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The existing list in which the items should be stored.</param>
            <seealso cref="P:Umbrace.Unity.PurePool.IObjectPool`1.Items"/>
        </member>
        <member name="T:Umbrace.Unity.PurePool.IGameObjectPoolSettings">
            <summary>
            An interface that defines the settings that can be changed on a <see cref="T:UnityEngine.GameObject"/> pool.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.IPoolable">
            <summary>
            Defines an interface for objects that can be maintained by an object pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IPoolable.Acquire">
            <summary>
            Reinitialises the object after being acquired from the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.IPoolable.Release">
            <summary>
            Frees any allocated resources, and stops any active processes, before the object returns to the pool.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.LogLevel">
            <summary>
            Specifies the level of log messaging to output.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.LogLevel.Off">
            <summary>
            Logging is disabled.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.LogLevel.Information">
            <summary>
            Informational messages, warning messages and error messages are displayed.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.LogLevel.Warning">
            <summary>
            Warning messages and error messages are displayed.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.LogLevel.Error">
            <summary>
            Only error messages are displayed.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.NotificationMode">
            <summary>
            Specifies the ways in which pooling notifications can be sent to <see cref="T:UnityEngine.MonoBehaviour"/> components.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NotificationMode.Interface">
            <summary>
            A custom interface that is applied to any components that need to respond to the notification.
            </summary>
            <seealso cref="T:Umbrace.Unity.PurePool.IPoolable"/>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NotificationMode.SendMessage">
            <summary>
            The built-in Unity messaging system that sends notifications using the <see cref="M:UnityEngine.GameObject.SendMessage(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.NotificationMode.UnityMessagingInterface">
            <summary>
            The built-in Unity messaging system that sends notifications using the <see cref="T:UnityEngine.EventSystems.ExecuteEvents"/> class, using an interface applied to any components that need to respond to the notification.
            </summary>
            <seealso cref="T:Umbrace.Unity.PurePool.IPoolable"/>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolableObject`1">
            <summary>
            A component that will automatically be attached to an instance of a pooled object,
            to provide notifications when the object is acquired from, or released to, the pool.
            </summary>
            <typeparam name="T">The type of object being pooled.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.CachePoolableComponents">
            <summary>
            Gets or sets a value indicating whether to cache the components found on this <see cref="T:UnityEngine.GameObject"/> that implement <see cref="T:Umbrace.Unity.PurePool.IPoolable"/>.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.SourceObject">
            <summary>
            Gets the source object that this pooled object is a clone of.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.NotificationMode">
            <summary>
            Gets or sets the way in which pooled objects are notified about being acquired from, and returned to, the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.IsInPool">
            <summary>
            Gets a value indicating whether the pooled object is currently unacquired and contained by the object pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.Initialised">
            <summary>
            Gets or sets a value indicating whether the poolable object has been initialised.
            </summary>
            <remarks>
            An initialised <see cref="T:Umbrace.Unity.PurePool.PoolableObject`1"/> has its <see cref="P:Umbrace.Unity.PurePool.PoolableObject`1.SourceObject"/> and <see cref="P:Umbrace.Unity.PurePool.PoolableObject`1.NotificationMode"/> properties set,
            as well as any other appropriate values.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.ExpectDestroy">
            <summary>
            Gets or sets a value indicating whether the destruction of the object or component was expected.
            </summary>
            <remarks>
            Destruction is most often expected when the object is being destroyed by the pool, because pooling has been disabled.
            The object is not released to the pool and not processed as if it is being released, but is simply destroyed instead.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.ExpectNoPool">
            <summary>
            Gets or sets a value indicating whether it is expected that there will be no pool for the instance to be returned to.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolableObject`1.PoolableComponents">
            <summary>
            Gets the components found on this <see cref="T:UnityEngine.GameObject"/> that implement <see cref="T:Umbrace.Unity.PurePool.IPoolable"/>.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.PoolableObject`1.Destroyed">
            <summary>
            Occurs when the <see cref="T:Umbrace.Unity.PurePool.PoolableObject`1"/> is destroyed.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.OnAcquire">
            <summary>
            Informs all poolable components that the object has been acquired from the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.OnRelease">
            <summary>
            Informs all poolable components that the object has been released back to the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.RefreshCache">
            <summary>
            Refreshes the cache of poolable components.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.AddToCache(Umbrace.Unity.PurePool.IPoolable)">
            <summary>
            Adds a poolable component to the cache.
            </summary>
            <param name="component">The component that implements <see cref="T:Umbrace.Unity.PurePool.IPoolable"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.AddToCache(UnityEngine.Component)">
            <summary>
            Adds a poolable component to the cache.
            </summary>
            <param name="component">The component to add to the cache.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.RemoveFromCache(Umbrace.Unity.PurePool.IPoolable)">
            <summary>
            Removes a poolable component from the cache.
            </summary>
            <param name="component">The component that implements <see cref="T:Umbrace.Unity.PurePool.IPoolable"/> to remove.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.RemoveFromCache(UnityEngine.Component)">
            <summary>
            Removes a poolable component from the cache.
            </summary>
            <param name="component">The component to remove from the cache.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.ClearCache">
            <summary>
            Clears the poolable components cache.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.OnDestroyed">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.PoolableObject`1.Destroyed"/> event.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolableObject`1.SupportsMode(Umbrace.Unity.PurePool.NotificationMode)">
            <summary>
            Determines whether the specified notification mode is supported.
            </summary>
            <param name="flag">The notification mode to check.</param>
            <returns><see langword="true"/> if the specified notification mode is supported; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolEventArgs`1">
            <summary>
            Contains event data for events involving an <see cref="T:Umbrace.Unity.PurePool.IPoolBase"/>.
            </summary>
            <typeparam name="TPool">The type of pool that the event is about.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolEventArgs`1.Pool">
            <summary>
            Gets or sets the pool that caused, or was affected by, the event.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolEventArgs`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolEventArgs`1"/> class.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolObjectEventArgs`1">
            <summary>
            Contains data for object pooling events.
            </summary>
            <typeparam name="T">The type of the object that the event is about.</typeparam>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolObjectEventArgs`1.Instance">
            <summary>
            Gets or sets the object that the event refers to.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectEventArgs`1.#ctor(`0)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolObjectEventArgs`1"/> class.
            </summary>
            <param name="instance">The object that the event is about.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectEventArgs`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolObjectEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectEventArgs`1.AcquireInternal">
            <summary>
            When implemented in a derived class, performs actions when the object is acquired from an object pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolObjectEventArgs`1.ReleaseInternal">
            <summary>
            Performs actions when the object is released back to an object pool.
            </summary>
        </member>
        <member name="T:Umbrace.Unity.PurePool.PoolStatistics">
            <summary>
            Contains general operational statistics about an object pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.ObjectsAliveInsideAndOutsidePool">
            <summary>
            Gets the number of objects currently owned by the pool, including both those in the pool and those acquired from, but not yet returned to, the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.ObjectsAliveOutsidePool">
            <summary>
            Gets the number of objects currently owned by the pool that have been acquired from, but not yet returned to, the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.InstantiationCount">
            <summary>
            Gets the number of objects that have been instantiated by the pool when the pool was empty.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.DestructionCount">
            <summary>
            Gets the number of objects that have been destroyed by the pool when the pool was full.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.AcquireCount">
            <summary>
            Gets the number of times that objects have been acquired from the pool, without instantiation.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.ReleaseCount">
            <summary>
            Gets the number of times that objects have been released to the pool, without destruction.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.HighestAliveCount">
            <summary>
            Gets the highest count of objects owned by the pool at any one time.
            </summary>
            <remarks>This value represents the size that the pool would have had to have been upon initialisation, to avoid instantiations being made at runtime.</remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.RecommendedPoolSize">
            <summary>
            Gets the recommended size that the pool should have been at initialisation time, to avoid instantiations.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.InitialisedTime">
            <summary>
            Gets the time at which the pool was initialised.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.LastAcquireTime">
            <summary>
            Gets the time at which an object was last acquired from the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.LastReleaseTime">
            <summary>
            Gets the time at which an object was last released to the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.LastInstantiateTime">
            <summary>
            Gets the time at which an object was last instantiated by the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.PoolStatistics.LastDestroyTime">
            <summary>
            Gets the time at which an object was last destroyed by the pool.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolStatistics.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolStatistics"/> class.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolStatistics.#ctor(Umbrace.Unity.PurePool.PoolStatistics)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.PoolStatistics"/> class.
            </summary>
            <param name="other">The pool statistics to copy values from.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.PoolStatistics.CopyFrom(Umbrace.Unity.PurePool.PoolStatistics)">
            <summary>
            Copies the statistics from another object into this one, overwriting the existing statistics.
            </summary>
            <param name="other">The <see cref="T:Umbrace.Unity.PurePool.PoolStatistics"/> object to copy values from.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SerialisableComponentPool">
            <summary>
            A serialisable object pool for a <see cref="T:UnityEngine.Component"/>, where the component type is not known at compile time.
            </summary>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.SerialisableComponentPool"/> can survive an assembly reload caused by live recompilation
            inside of the Unity editor.
            </para>
            <para>
            <see cref="T:Umbrace.Unity.PurePool.SerialisableComponentPool"/> achieves this by serialising the instances of the component that were contained in the pool,
            and then re-adding them to the pool after deserialisation.
            </para>
            <para>
            To use the <see cref="T:Umbrace.Unity.PurePool.SerialisableComponentPool"/>, initialise a new instance using the constructor, and then set the properties to appropriate values.
            Once all properties have been set, invoke the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/> method. A pool cannot be used without being initialised in this way.
            </para>
            </remarks>
            <example>
            <code language="cs">
            // Create the pool.
            var pool = new SerialisableComponentPool(typeof(AudioSource), parentContainer) {
            	InitialSize = 50,
            	MaximumSize = 200,
            	InstantiateWhenEmpty = true,
            	NotificationMode = NotificationMode.Interface,
            	LogMessages = LogLevel.Warning
            };
            
            // Initialise the pool. It will contain 50 objects.
            pool.Initialise();
            
            // Acquire one of the 50 components from the pool. The Acquire method can be used safely if InstantiateWhenEmpty is true, or if a check is made to CanAcquire beforehand.
            AudioSource instance = pool.Acquire&lt;AudioSource&gt;();
            
            // Acquire one of the 49 remaining components from the pool. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            AudioSource secondInstance;
            if (pool.TryAcquire(out secondInstance)) {
            	// Release the component back to the pool. It now contains 49 objects again.
            	pool.Release(secondInstance);
            }
            
            // Release the component back to the pool. It now contains 50 objects.
            pool.Release(instance);
            </code>
            </example>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1"/>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableComponentPool.ComponentType">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.#ctor(System.Type,UnityEngine.Transform,System.Type[])">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SerialisableComponentPool"/> class.
            </summary>
            <param name="componentType">The type of the component to pool.</param>
            <param name="parent">The parent transform to which all pooled <see cref="T:UnityEngine.GameObject"/> objects will be parented in the hierarchy.</param>
            <param name="additionalComponents">An optional list of additional component types, that should be added to the same GameObject as the main component type.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1">
            <summary>
            Acquires an instance of the component.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(UnityEngine.Transform,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the components's transform to.</param>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <returns>An instance of the component from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(``0@)">
            <summary>
            Acquires an instance of the component.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(UnityEngine.Transform,``0@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.TryAcquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,``0@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type of component being acquired.</typeparam>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableComponentPool.Acquire``1(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableComponentPool.CheckType``1(System.String)">
            <summary>
            A conditionally-compiled helper method that checks if the type <typeparamref name="T"/> is assignable from <see cref="P:Umbrace.Unity.PurePool.SerialisableComponentPool.ComponentType"/>.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="memberName">The name of the member that is calling this method.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1">
            <summary>
            A generic, serialisable object pool for a <see cref="T:UnityEngine.Component"/>, where the component type is known at compile time.
            </summary>
            <typeparam name="T">The type of component being pooled.</typeparam>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1"/> can survive an assembly reload caused by live recompilation
            inside of the Unity editor. However, to ensure Unity is able to serialise fields containing pools, you should subclass <see cref="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1"/>
            by creating a new, non-generic, class derived from it.
            </para>
            <para>
            <see cref="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1"/> achieves this by serialising the instances of the component that were contained in the pool,
            and then re-adding them to the pool after deserialisation.
            </para>
            <para>
            To use the <see cref="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1"/>, initialise a new instance using the constructor, and then set the properties to appropriate values.
            Once all properties have been set, invoke the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/> method. A pool cannot be used without being initialised in this way.
            </para>
            </remarks>
            <example>
            <code language="cs">
            // Create the pool.
            var pool = new SerialisableGenericComponentPool&lt;AudioSource&gt;(parentContainer) {
            	InitialSize = 50,
            	MaximumSize = 200,
            	InstantiateWhenEmpty = true,
            	NotificationMode = NotificationMode.Interface,
            	LogMessages = LogLevel.Warning
            };
            
            // Initialise the pool. It will contain 50 objects.
            pool.Initialise();
            
            // Acquire one of the 50 components from the pool. The Acquire method can be used safely if InstantiateWhenEmpty is true, or if a check is made to CanAcquire beforehand.
            AudioSource instance = pool.Acquire();
            
            // Acquire one of the 49 remaining components from the pool. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            AudioSource secondInstance;
            if (pool.TryAcquire(out secondInstance)) {
            	// Release the component back to the pool. It now contains 49 objects again.
            	pool.Release(secondInstance);
            }
            
            // Release the component back to the pool. It now contains 50 objects.
            pool.Release(instance);
            </code>
            </example>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableComponentPool"/>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.parent">
            <summary>
            The parent transform to which all pooled objects will be parented in the hierarchy,
            if <see cref="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.reparentPooledObjects"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.notificationMode">
            <summary>
            The way in which pooled objects are notified about being acquired from, and returned to, the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.reparentPooledObjects">
            <summary>
            Whether to re-parent the pooled objects to the <see cref="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.parent"/> transform,
            after the objects are returned to the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.additionalComponents">
            <summary>
            A list of additional component types, that should be added to the same GameObject as the main component type.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.warnOnDestroy">
            <summary>
            Whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.componentToPoolable">
            <summary>
            A dictionary mapping pooled components to their <see cref="T:Umbrace.Unity.PurePool.PoolableComponent"/> component. This is necessary as we can't use GetComponent from OnAfterDeserialize.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.serialisedGameObjects">
            <summary>
            The objects contained by the pool at the time the pool was serialised by Unity.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.ComponentType">
            <summary>
            Gets the type of the component being pooled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.AdditionalComponentTypes">
            <summary>
            Gets a list of additional component types, that should be added to the same GameObject as the main component type.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Parent">
            <summary>
            Gets or sets the parent transform to which all pooled objects will be parented in the hierarchy,
            if <see cref="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.ReparentPooledObjects"/> is <see langword="true"/>.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.ReparentPooledObjects"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.NotificationMode">
            <summary>
            Gets or sets the way in which pooled objects are notified about being acquired from, and returned to, the pool.
            Cannot be set once the pool has been initialised.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.ReparentPooledObjects">
            <summary>
            Gets or sets a value indicating whether to re-parent the pooled objects to the <see cref="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Parent"/> transform,
            after the objects are returned to the pool.
            </summary>
            <remarks>
            Re-parenting is enabled by default and is the safest option, but comes with a small performance penalty.
            Disabling re-parenting provides the best performance but there is the increased risk of any of the objects being affected
            by other scripts. As the objects will be parented beneath various other objects, deleting of an unrelated object
            may cause the pooled object to also be deleted.
            You should pay great attention to what objects you destroy if re-parenting is disabled.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Parent"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.WarnOnDestroy">
            <summary>
            Gets or sets a value indicating whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
            <remarks>
            <para>
            Poolable objects should be released to the pool and re-used, rather than being destroyed.
            This property ensures any destruction of the pooled objects is logged.
            </para>
            <para>
            Unfortunately, scene changes may also cause pooled objects to be destroyed. In this case, the warning message will be shown incorrectly,
            and can safely be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.RefillPoolOnReinitialise">
            <summary>
            Gets a value indiciating whether to refill the pool with new components after the pool is reinitialised,
            as happens from deserialisation.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.#ctor(UnityEngine.Transform,System.Type[])">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1"/> class.
            </summary>
            <param name="parent">The parent transform to which all pooled <see cref="T:UnityEngine.GameObject"/> objects will be parented in the hierarchy.</param>
            <param name="additionalComponents">An optional list of additional component types, that should be added to the same GameObject as the main component type.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.GetObjectFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.OnObjectAcquired(`0,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.OnObjectReleased(`0,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.OnObjectDestroyed(`0)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.OnBeforeSerialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.OnAfterDeserialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.ReleaseInternal(`0)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Acquire(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <returns>An instance of the component, <typeparamref name="T"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.TryAcquire(UnityEngine.Transform,`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the components's transform to.</param>
            <returns>An instance of the component, <typeparamref name="T"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Acquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <returns>An instance of the component, <typeparamref name="T"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.TryAcquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.TryAcquire(UnityEngine.Transform,`0@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="instance">When this method returns, contains the instance of the component <typeparamref name="T"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component <typeparamref name="T"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Acquire(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,`0@)">
            <summary>
            Acquires an instance of the component, and sets the position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component <typeparamref name="T"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component <typeparamref name="T"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.TryAcquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,`0@)">
            <summary>
            Acquires an instance of the component, and sets the parent transform, position and rotation of its <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="parent">The transform to which the component's <see cref="T:UnityEngine.GameObject"/> should be parented.</param>
            <param name="position">The position to set the component's transform to.</param>
            <param name="rotation">The rotation to set the component's transform to.</param>
            <param name="instance">When this method returns, contains the instance of the component <typeparamref name="T"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of the component <typeparamref name="T"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.Acquire(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGenericComponentPool`1.HandlePoolObjectDestroyed(System.Object,Umbrace.Unity.PurePool.DestroyedEventArgs)">
            <summary>
            Handles the <see cref="E:Umbrace.Unity.PurePool.PoolableObject`1.Destroyed"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SerialisableDictionary`2">
            <summary>
            A serialisable implementation of a key-value pair dictionary. The types <typeparamref name="TKey"/> and <typeparamref name="TValue"/> must also be serialisable.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SerialisableGameObjectPool">
            <summary>
            A serialisable object pool for <see cref="T:UnityEngine.GameObject"/>-type objects.
            </summary>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.SerialisableGameObjectPool"/> can survive an assembly reload caused by live recompilation
            inside of the Unity editor.
            </para>
            <para>
            <see cref="T:Umbrace.Unity.PurePool.SerialisableGameObjectPool"/> achieves this by serialising the instances of the object that were contained in the pool,
            and then re-adding them to the pool after deserialisation.
            </para>
            <para>
            To use the <see cref="T:Umbrace.Unity.PurePool.SerialisableGameObjectPool"/>, initialise a new instance using the constructor, and then set the properties to appropriate values.
            Once all properties have been set, invoke the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/> method. A pool cannot be used without being initialised in this way.
            </para>
            </remarks>
            <example>
            <code language="cs">
            // Create the pool.
            var pool = new SerialisableGameObjectPool(prefab, parentContainer) {
            	InitialSize = 50,
            	MaximumSize = 200,
            	InstantiateWhenEmpty = true,
            	NotificationMode = NotificationMode.Interface,
            	LogMessages = LogLevel.Warning
            };
            
            // Initialise the pool. It will contain 50 objects.
            pool.Initialise();
            
            // Acquire one of the 50 objects from the pool. The Acquire method can be used safely if InstantiateWhenEmpty is true, or if a check is made to CanAcquire beforehand.
            GameObject instance = pool.Acquire();
            
            // Acquire one of the 49 remaining objects from the pool. TryAcquire can be used safely even when InstantiateWhenEmpty is false.
            GameObject secondInstance;
            if (pool.TryAcquire(out secondInstance)) {
            	// Release the object back to the pool. It now contains 49 objects again.
            	pool.Release(secondInstance);
            }
            
            // Release the object back to the pool. It now contains 50 objects.
            pool.Release(instance);
            </code>
            </example>
            <seealso cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/>
            <seealso cref="T:Umbrace.Unity.PurePool.GameObjectPool"/>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.sourceObject">
            <summary>
            The object to be pooled.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.parent">
            <summary>
            The parent transform to which all pooled objects will be parented in the hierarchy,
            if <see cref="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.reparentPooledObjects"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.notificationMode">
            <summary>
            The way in which pooled objects are notified about being acquired from, and returned to, the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.reparentPooledObjects">
            <summary>
            Whether to re-parent the pooled objects to the <see cref="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.parent"/> transform,
            after the objects are returned to the pool.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.warnOnDestroy">
            <summary>
            Whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.gameObjectToPoolable">
            <summary>
            A dictionary mapping pooled objects to their PoolableObject component. This is necessary as we can't use GetComponent from OnAfterDeserialize.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.serialisedGameObjects">
            <summary>
            The objects contained by the pool at the time the pool was serialised by Unity.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableGameObjectPool.sourceObjectTransform">
            <summary>
            A cached copy of the source object's Transform component, for performance reasons.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject">
            <summary>
            Gets the source object that is being pooled.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Parent">
            <summary>
            Gets or sets the parent transform to which all pooled objects will be parented in the hierarchy,
            if <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.ReparentPooledObjects"/> is <see langword="true"/>.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.ReparentPooledObjects"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.NotificationMode">
            <summary>
            Gets or sets the way in which pooled objects are notified about being acquired from, and returned to, the pool.
            Cannot be set once the pool has been initialised.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.ReparentPooledObjects">
            <summary>
            Gets or sets a value indicating whether to re-parent the pooled objects to the <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Parent"/> transform,
            after the objects are returned to the pool.
            </summary>
            <remarks>
            Re-parenting is enabled by default and is the safest option, but comes with a small performance penalty.
            Disabling re-parenting provides the best performance but there is the increased risk of any of the objects being affected
            by other scripts. As the objects will be parented beneath various other objects, deleting of an unrelated object
            may cause the pooled object to also be deleted.
            You should pay great attention to what objects you destroy if re-parenting is disabled.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Parent"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.WarnOnDestroy">
            <summary>
            Gets or sets a value indicating whether to log a warning message when a poolable object is destroyed (either inside of the pool, or while in use).
            </summary>
            <remarks>
            <para>
            Poolable objects should be released to the pool and re-used, rather than being destroyed.
            This property ensures any destruction of the pooled objects is logged.
            </para>
            <para>
            Unfortunately, scene changes may also cause pooled objects to be destroyed. In this case, the warning message will be shown incorrectly,
            and can safely be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceTransform">
            <summary>
            Gets a cached copy of the source object's Transform component, for performance reasons.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.RefillPoolOnReinitialise">
            <summary>
            Gets a value indiciating whether to refill the pool with new objects after the pool is reinitialised,
            as happens from deserialisation.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.#ctor(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SerialisableGameObjectPool"/> class.
            </summary>
            <param name="sourceObject">The object to be pooled.</param>
            <param name="parent">The parent transform to which all pooled <see cref="T:UnityEngine.GameObject"/> objects will be parented in the hierarchy.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.GetObjectFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.OnObjectAcquired(UnityEngine.GameObject,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.OnObjectReleased(UnityEngine.GameObject,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.OnObjectDestroyed(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.OnBeforeSerialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.OnAfterDeserialize">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.ReleaseInternal(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Transform)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Transform,System.Boolean)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Acquires an instance of the source object, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform, position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <returns>An instance of the source object, <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Transform,System.Boolean,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.TryAcquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Acquires an instance of the source object, and sets its parent transform, position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/>, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an instance of <see cref="P:Umbrace.Unity.PurePool.SerialisableGameObjectPool.SourceObject"/> was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.Acquire(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.InternalTryInstantiate(UnityEngine.Transform,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.InternalTryInstantiate(UnityEngine.Transform,System.Boolean,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="spawnInWorldSpace"><see langword="true"/> if the original world position should be maintained when assigning the parent; otherwise, <see langword="false"/>.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.InternalTryInstantiate(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its position and rotation.
            </summary>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.InternalTryInstantiate(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>, and sets its parent transform, position and rotation.
            </summary>
            <param name="parent">The transform to which the instance should be parented.</param>
            <param name="position">The position to set the instance's transform to.</param>
            <param name="rotation">The rotation to set the instance's transform to.</param>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableGameObjectPool.HandlePoolObjectDestroyed(System.Object,Umbrace.Unity.PurePool.DestroyedEventArgs)">
            <summary>
            Handles the <see cref="E:Umbrace.Unity.PurePool.PoolableObject`1.Destroyed"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1">
            <summary>
            A serialisable, generic implementation of an object pool, that allows for recycling and reuse of objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of object being pooled.</typeparam>
            <remarks>
            <para>
            By virtue of being serialisable, <see cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/> can survive an assembly reload caused by live recompilation inside of the Unity editor.
            However, to ensure Unity is able to serialise fields containing pools, you should subclass <see cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/>
            by creating a new, non-generic, class derived from it.
            </para>
            <para>
            <see cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/> achieves this by serialising the number of instances of the object that were contained in the pool,
            and then recreating them after deserialisation. In other cases, it's possible to let Unity serialise the objects contained in the pool, and
            simply add them back into the pool after deserialisation.
            </para>
            <para>
            To use the <see cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/>, derive a new, non-generic, class from it and override the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.GetObjectFactory"/> method.
            This method is responsible for providing an object factory that can create new instances of the desired object.
            Initialise a new instance of the derived class using the constructor, and then set the properties to appropriate values.
            Once all properties have been set, invoke the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/> method. A pool cannot be used without being initialised in this way.
            </para>
            </remarks>
            <seealso cref="T:Umbrace.Unity.PurePool.IObjectPool`1"/>
            <seealso cref="T:Umbrace.Unity.PurePool.GenericObjectPool`1"/>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableObjectPool`1.DefaultInitialSize">
            <summary>
            The default initial size of newly-created pools.
            </summary>
        </member>
        <member name="F:Umbrace.Unity.PurePool.SerialisableObjectPool`1.DefaultMaximumPoolSize">
            <summary>
            The default maximum size of newly-created pools.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsInitialised">
            <summary>
            Gets a value indicating whether the pool has been initialised.
            </summary>
            <remarks>An initialised pool cannot have its <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InitialSize"/> property changed.</remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.LogMessages">
            <summary>
            Gets or sets the level of log messaging that the pool will output.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty">
            <summary>
            Gets or sets a value indicating whether to instantiate a new object when the pool is empty, and an attempt is made to acquire from the pool.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InitialSize">
            <summary>
            Gets or sets the initial size of the pool. Cannot be set once the pool has been initialised.
            </summary>
            <remarks>
            <para>This property cannot be set once the pool has been initialised.</para>
            <para>The initial size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.MaximumSize"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.MaximumSize">
            <summary>
            Gets or sets the maximum size of the pool, which is the maximum number of objects it can contain.
            </summary>
            <remarks>
            <para>The maximum size must be greater than, or equal to, zero. It cannot be a negative number.</para>
            <para>If an object is released to the pool while the pool is full, the object will be destroyed.</para>
            <para>
            If <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.MaximumSize"/> is set to a value lower than the current <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>, the pool will be
            reduced in size by destroying excess objects.
            </para>
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InitialSize"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count">
            <summary>
            Gets the number of objects currently contained by the pool.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsInitialised"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsFull"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InitialSize"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.MaximumSize"/>
            <seealso cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CountChanged"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Items">
            <summary>
            Gets a list of items currently contained by the pool.
            </summary>
            <remarks>
            <para>This property cannot be accessed until the pool has been initialised.</para>
            <para>
            This property always creates a new <see cref="T:System.Collections.Generic.List`1"/> each time the property getter is accessed.
            For performance reasons the value should be cached where possible, to avoid the costs of object instantiation and garbage collection.
            </para>
            <para>See the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/> method for a way to avoid the allocation of a new <see cref="T:System.Collections.Generic.List`1"/> object.</para>
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.GetItems(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Statistics">
            <summary>
            Gets an object containing general operational statistics about the pool.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsEmpty">
            <summary>
            Gets a value indicating whether the pool is empty and contains no objects.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsFull"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsFull">
            <summary>
            Gets a value indicating whether the pool is full, and cannot contain any more objects.
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsEmpty"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire">
            <summary>
            <para>Gets a value indicating whether an instance can be acquired from the pool.</para>
            <para>An instance can be acquired when the pool contains at least one instance, or when <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>.</para>
            </summary>
            <remarks>
            This property cannot be accessed until the pool has been initialised.
            </remarks>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsEmpty"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/>
            <seealso cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquireChanged"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.RecordStatistics">
            <summary>
            Gets or sets a value indicating whether to record pool statistics.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Statistics"/>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.RefillPoolOnReinitialise">
            <summary>
            Gets a value indiciating whether to refill the pool with new objects after the pool is reinitialised,
            as happens from deserialisation.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialised">
            <summary>
            Occurs when the pool is initialised.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectInstantiated">
            <summary>
            Occurs when a new object is instantiated.
            </summary>
            <remarks>
            This event can occur before the pool is fully initialised. This happens when <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/> is first called,
            and <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InitialSize"/> is greater than zero. Care should be taken to avoid using any methods or properties on the pool
            that require the pool to be initialised, unless suitable checks are made to <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.IsInitialised"/>.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectAcquired">
            <summary>
            Occurs when an object is acquired from the pool.
            </summary>
            <remarks>
            This event will also be invoked for objects that are instantiated when the pool is empty, in addition to <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectInstantiated"/>.
            In this situation, the <see cref="P:Umbrace.Unity.PurePool.PoolObjectAcquiredEventArgs`1.Instantiated"/> property is set to <see langword="true"/> to indicate that the acquired object was instantiated.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectReleased">
            <summary>
            Occurs when an object is released back to the pool.
            </summary>
            <remarks>
            This event will also be invoked for objects that are released to a pool that has reached its maximum size.
            In this situation, the <see cref="P:Umbrace.Unity.PurePool.PoolObjectReleasedEventArgs`1.Destroying"/> property is set to <see langword="true"/> to indicate that the released object is about to be destroyed.
            </remarks>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectDestroyed">
            <summary>
            Occurs when an object is destroyed.
            </summary>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquireChanged">
            <summary>
            Occurs when the value of <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
        </member>
        <member name="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CountChanged">
            <summary>
            Occurs when <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/> changes.
            </summary>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/> class.
            </summary>
            <remarks>An instance of <see cref="T:Umbrace.Unity.PurePool.SerialisableObjectPool`1"/> must be initialised using the <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise"/> method.</remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise">
            <summary>
            Initialises the pool, populating it with objects and making it ready for use.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialise(System.Boolean)">
            <summary>
            Initialises the pool, making it ready for use, and optionally populating it with objects.
            </summary>
            <param name="reinitialise">A value indicating whether the pool is being reinitialised after deserialisation.</param>
            <exception cref="T:System.InvalidOperationException">No public parameterless constructor could be found on type <typeparamref name="T"/>, or, <see cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.GetObjectFactory"/> threw an exception.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Acquire">
            <summary>
            Acquires an object from the pool.
            </summary>
            <returns>An object from the pool.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.TryAcquire(`0@)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.TryAcquire(`0@)">
            <summary>
            Acquires an object from the pool.
            </summary>
            <param name="instance">When this method returns, contains the object from the pool, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was acquired from the pool; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Acquire"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Release(`0)">
            <summary>
            Releases an object back to the pool.
            </summary>
            <param name="instance">The object to release to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ReleaseInternal(`0)">
            <summary>
            Releases an object back to the pool.
            </summary>
            <param name="instance">The object to release to the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.SetSize(System.Int32)">
            <summary>
            Sets the number of objects contained by the pool, either destroying excess pooled objects, or instantiating new ones.
            </summary>
            <param name="poolSize">The target number of objects the pool should contain.</param>
            <remarks>
            <paramref name="poolSize"/> cannot be a negative number, and cannot be larger than <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.MaximumSize"/>.
            </remarks>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Fill"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Clear"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Fill">
            <summary>
            Fills the pool, populating it with pooled objects until it reaches the maximum pool size.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Clear"/>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.MaximumSize"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Clear">
            <summary>
            Clears the pool, emptying it of all pooled objects.
            </summary>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.SetSize(System.Int32)"/>
            <seealso cref="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Fill"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Remove(`0)">
            <summary>
            Removes the specified instance from the pool.
            </summary>
            <param name="instance">The instance of the source object that should be removed from the pool.</param>
            <returns><see langword="true"/> if the instance was found in the pool and removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Contains(`0)">
            <summary>
            Determines whether an instance is in the pool.
            </summary>
            <param name="instance">The instance of the source object to locate in the pool.</param>
            <returns><see langword="true"/> if <paramref name="instance"/> is found in the pool; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.GetItems(System.Collections.Generic.List{`0})">
            <summary>
            Gets a list of items currently contained by the pool, and stores them in the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The existing list in which the items should be stored.</param>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Items"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InternalAdd(`0)">
            <summary>
            Adds an instance directly to the pool. This method is used internally and should be used with caution.
            </summary>
            <param name="instance">The instance to add to the pool.</param>
            <remarks>
            <para>If the maximum size of the pool would be exceeded by adding the instance, the instance is destroyed.</para>
            <para>
            This method does not inform the instance that it is being returned to the pool, and does not raise
            any events. It should only be used to add instances to the pool that were previously already in the pool,
            such as those serialised during live recompilation.
            </para>
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InternalTryInstantiate(`0@)">
            <summary>
            Instantiates a new object if <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/> is <see langword="true"/>.
            </summary>
            <param name="instance">When this method returns, contains the instantiated object, if one could be acquired; otherwise, <see langword="null"/>. This parameter is passed uninitialised.</param>
            <returns><see langword="true"/> if an object was instantiated; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.InstantiateWhenEmpty"/>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnAfterDeserialize">
            <summary>
            Performs actions after the object has been deserialised.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnBeforeSerialize">
            <summary>
            Performs actions prior to the object being serialised.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.GetObjectFactory">
            <summary>
            Gets a function used to create new instances of the pooled type.
            By default, this method uses the public parameterless constructor of type <typeparamref name="T"/>.
            This method should be overridden in a subclass if different behaviour is required.
            </summary>
            <returns>A function that can be used to create new instances of the pooled type.</returns>
            <exception cref="T:System.InvalidOperationException">No public parameterless constructor could be found on type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnInitialised">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Initialised"/> event.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnObjectInstantiated(`0)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectInstantiated"/> event.
            </summary>
            <param name="instance">The object that was instantiated.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnObjectAcquired(`0,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectAcquired"/> event.
            </summary>
            <param name="instance">The object that was acquired from the pool.</param>
            <param name="instantiated">A value indicating whether the acquired object was instantiated specifically for this acquisition, rather than being taken from the pool.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnObjectReleased(`0,System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectReleased"/> event.
            </summary>
            <param name="instance">The object that was released back to the pool.</param>
            <param name="destroying">A value indicating whether the released object is about to be destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnObjectDestroyed(`0)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.ObjectDestroyed"/> event.
            </summary>
            <param name="instance">The object that was destroyed.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnCanAcquireChanged(System.Boolean)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquireChanged"/> event.
            </summary>
            <param name="canAcquire">The new value of <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CanAcquire"/>.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableObjectPool`1.OnCountChanged(System.Int32)">
            <summary>
            Raises the <see cref="E:Umbrace.Unity.PurePool.SerialisableObjectPool`1.CountChanged"/> event.
            </summary>
            <param name="count">The new value of <see cref="P:Umbrace.Unity.PurePool.SerialisableObjectPool`1.Count"/>.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.SerialisableType">
            <summary>
            A serialisable class that represents a <see cref="P:Umbrace.Unity.PurePool.SerialisableType.Type"/>.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.SerialisableType.Type">
            <summary>
            Gets or sets type of class reference.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableType.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SerialisableType"/> class.
            </summary>
            <param name="assemblyQualifiedName">The assembly qualified name of the type.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableType.#ctor(System.Type)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.SerialisableType"/> class.
            </summary>
            <param name="type">The <see cref="P:Umbrace.Unity.PurePool.SerialisableType.Type"/> to represent.</param>
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbrace.Unity.PurePool.SerialisableType.Equals(Umbrace.Unity.PurePool.SerialisableType)">
            <inheritdoc />
        </member>
        <member name="T:Umbrace.Unity.PurePool.TimeInstant">
            <summary>
            Represents a single captured instant in time.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.TimeInstant.FrameCount">
            <summary>
            Gets the value of <see cref="P:UnityEngine.Time.frameCount"/> as of the captured instant in time.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.TimeInstant.RealtimeSinceStartup">
            <summary>
            Gets the value of <see cref="P:UnityEngine.Time.realtimeSinceStartup"/> as of the captured instant in time.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.TimeInstant.Time">
            <summary>
            Gets the value of <see cref="P:UnityEngine.Time.time"/> as of the captured instant in time.
            </summary>
        </member>
        <member name="P:Umbrace.Unity.PurePool.TimeInstant.UnscaledTime">
            <summary>
            Gets the value of <see cref="P:UnityEngine.Time.unscaledTime"/> as of the captured instant in time.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.TimeInstant.#ctor(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Initialises a new instance of the <see cref="T:Umbrace.Unity.PurePool.TimeInstant"/> struct.
            </summary>
            <param name="frameCount">The total number of frames that have passed.</param>
            <param name="realtimeSinceStartup">The real time in seconds since the game started.</param>
            <param name="time">The time at the beginning of the frame.</param>
            <param name="unscaledTime">The time-scale independent time at the beginning of the frame.</param>
        </member>
        <member name="T:Umbrace.Unity.PurePool.TypeHelper">
            <summary>
            A static class that provides utility methods for working with <see cref="T:UnityEngine.Component"/> types.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.PurePool.TypeHelper.FindComponentTypes(System.Boolean)">
            <summary>
            Finds all types within the current <see cref="T:System.AppDomain"/> that can be added to a <see cref="T:UnityEngine.GameObject"/> as a component.
            </summary>
            <param name="allowEmptyComponentMenu">
            Whether to include component types if the <see cref="T:UnityEngine.AddComponentMenu"/> attribute specifies an empty
            component menu name, meaning the component won't show up in the Add Component menu.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all types that can be added as a component.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.TypeHelper.CanAddAsComponent(System.Type,System.Boolean)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Type"/> can be added to a <see cref="T:UnityEngine.GameObject"/> as a component.
            </summary>
            <param name="type">The type to check.</param>
            <param name="allowEmptyComponentMenu">
            Whether to allow the component type if its <see cref="T:UnityEngine.AddComponentMenu"/> attribute specifies an empty
            component menu name, meaning the component won't show up in the Add Component menu.
            </param>
            <returns><see langword="true"/> if the specified type can be added to a <see cref="T:UnityEngine.GameObject"/> as a component; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.TypeHelper.DisallowMultiple(System.Type)">
            <summary>
            Gets a value indicating whether the specified component <see cref="T:System.Type"/> can be added multiple times to a <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="componentType"></param>
            <returns><see langword="true"/> if the specified component type can be added multiple times; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Umbrace.Unity.PurePool.TypeHelper.FindPoolableComponents(System.Type)">
            <summary>
            Gets the components that implement <see cref="T:Umbrace.Unity.PurePool.IPoolable"/> for the specified <paramref name="componentType"/>.
            </summary>
            <param name="componentType">The type whose <see cref="T:Umbrace.Unity.PurePool.IPoolable"/> components should be found.</param>
            <returns>A collection of component types that implement <see cref="T:Umbrace.Unity.PurePool.IPoolable"/>, and require a <paramref name="componentType"/> component.</returns>
        </member>
        <member name="T:Umbrace.Unity.Contracts.Contract">
            <summary>
            Contains static methods for representing program contracts such as preconditions.
            </summary>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Specifies a precondition contract for the enclosing method or property.
            </summary>
            <param name="condition">The conditional expression to test.</param>
            <param name="memberName"></param>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.RequiresMessage(System.Boolean,System.String,System.String)">
            <summary>
            Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.
            </summary>
            <param name="condition">The conditional expression to test.</param>
            <param name="message">The message to display if the condition is <see langword="false"/>.</param>
            <param name="memberName"></param>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.RequiresMessage(System.Boolean,System.Func{System.String},System.String)">
            <summary>
            Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.
            </summary>
            <param name="condition">The conditional expression to test.</param>
            <param name="messageBuilder">A function that returns the message to display if the condition is <see langword="false"/>.</param>
            <param name="memberName"></param>
            <remarks>
            This method allows string formatting and concatenation to be performed after it is known whether the message will be displayed.
            This avoids generating unnecessary allocations, and therefore also avoids the associated increase in garbage collector pressure.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.RequiresMessage(System.Boolean,System.Func{System.String,System.String},System.String,System.String)">
            <summary>
            Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.
            </summary>
            <param name="condition">The conditional expression to test.</param>
            <param name="messageBuilder">A function that returns the message to display if the condition is <see langword="false"/>.</param>
            <param name="arg1">The first argument to be passed to <paramref name="messageBuilder"/>.</param>
            <param name="memberName"></param>
            <remarks>
            This method allows string formatting and concatenation to be performed after it is known whether the message will be displayed.
            This avoids generating unnecessary allocations, and therefore also avoids the associated increase in garbage collector pressure.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.RequiresMessage(System.Boolean,System.Func{System.String,System.String,System.String},System.String,System.String,System.String)">
            <summary>
            Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.
            </summary>
            <param name="condition">The conditional expression to test.</param>
            <param name="messageBuilder">A function that returns the message to display if the condition is <see langword="false"/>.</param>
            <param name="arg1">The first argument to be passed to <paramref name="messageBuilder"/>.</param>
            <param name="arg2">The second argument to be passed to <paramref name="messageBuilder"/>.</param>
            <param name="memberName"></param>
            <remarks>
            This method allows string formatting and concatenation to be performed after it is known whether the message will be displayed.
            This avoids generating unnecessary allocations, and therefore also avoids the associated increase in garbage collector pressure.
            </remarks>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.RequiresNotNull``1(``0,System.String,System.String)">
            <summary>
            Specifies a non-null precondition contract for the enclosing method or property.
            </summary>
            <typeparam name="T">The type of the object to test.</typeparam>
            <param name="obj">The object to test for null.</param>
            <param name="objectName">The name of the object. Use the <see langword="nameof"/> operator.</param>
            <param name="memberName"></param>
        </member>
        <member name="M:Umbrace.Unity.Contracts.Contract.Requires``1(System.Boolean,System.String,System.String)">
            <summary>
            Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the condition is <see langword="false"/>.</typeparam>
            <param name="condition">The conditional expression to test.</param>
            <param name="message">The message to display if the condition is <see langword="false"/>.</param>
            <param name="memberName"></param>
        </member>
    </members>
</doc>
